.tagify{
    // SCSS "default" allows overriding variables BEFORE they are set in the below lines of code
    $self: &;
    $tags-border-color       : #DDD !default;
    $tags-hover-border-color : #CCC !default;
    $tags-focus-border-color : #85C8EA !default;

    $tagMargin               : 5px !default;
    $tag-pad                 : .3em .5em !default;

    $tag-text-color          : black !default;
    $tag-text-color--edit    : black !default;
    $tag-bg                  : #E5E5E5 !default;
    $tag-hover               : #D3E2E2 !default;
    $tag-remove              : #D39494 !default;
    $tag-remove-btn-bg       : none !default;
    $tag-remove-btn-bg--hover: darken($tag-remove, 8) !default;
    $tag-invalid-color       : $tag-remove !default;
    $tag-invalid-bg          : rgba($tag-remove, .5) !default;
    $showX                   : true !default;
    $tag-inset-shadow-size   : 1.1em !default;

    // CSS variables
    --tags-border-color        : #{$tags-border-color};
    --tag-bg                   : #{$tag-bg};
    --tag-hover                : #{$tag-hover};
    --tag-text-color           : #{$tag-text-color};
    --tag-text-color--edit     : #{$tag-text-color--edit};
    --tag-pad                  : #{$tag-pad};
    --tag-inset-shadow-size    : #{$tag-inset-shadow-size};
    --tag-invalid-color        : #{$tag-invalid-color};
    --tag-invalid-bg           : #{$tag-invalid-bg};
    --tag-remove-bg            : #{rgba($tag-remove, .3)};
    --tag-remove-btn-bg        : #{$tag-remove-btn-bg};
    --tag-remove-btn-bg--hover : #{$tag-remove-btn-bg--hover};
    --tag--min-width           : 1ch;
    --tag--max-width           : auto;



    @mixin placeholder( $show:true, $opacity:.5 ){
        transition:.2s ease-out;
        @if $show == true {
            opacity:$opacity; transform:none;
        }
        @else {
            opacity:0; transform:translatex(6px);
        }
    }

    @mixin tagReadonlyBG{
        background: linear-gradient(45deg, var(--tag-bg)  25%,
                                           transparent    25%,
                                           transparent    50%,
                                           var(--tag-bg)  50%,
                                           var(--tag-bg)  75%,
                                           transparent    75%,
                                           transparent)         0/5px 5px;
        box-shadow: none;
        filter: brightness(.95);
    }

    @keyframes tags--bump{
        30% { transform: scale(1.2); }
    }

    display       : flex;
    align-items   : flex-start;
    flex-wrap     : wrap;
    border        : 1px solid $tags-border-color;
    border        : 1px solid var(--tags-border-color);
    padding       : 0;
    line-height   : 1.1;
    cursor        : text;
    position      : relative;
    transition    : .1s;

    &:hover{ border-color:$tags-hover-border-color; }
    &.tagify--focus{ border-color: $tags-focus-border-color; }

    // Global "read-only" mode (no input button)
    &[readonly]{
        cursor: default;
        > #{ $self }__input{
            visibility: hidden;
            width: 0;
            margin: $tagMargin 0;
        }
        #{ $self }__tag__removeBtn{ display:none; }
        #{ $self }__tag > div{
            padding: $tag-pad;
            padding: var(--tag-pad);
            &::before{
                @include tagReadonlyBG;
            }
        }
    }

    ///////////////////////////////////////////
    // Hides originals
    + input,
    + textarea{ display:none !important; }

    &__tag{
        display        : inline-flex;
        align-items    : center;
        margin         : $tagMargin 0 $tagMargin $tagMargin;
      //  vertical-align : top;
        position       : relative;
        z-index        : 1;
        cursor         : default;
        transition     : .13s ease-out;

        &.tagify--editable{
            > div{
                color : $tag-text-color--edit;
                color : var(--tag-text-color--edit);

                &::before{
                    box-shadow: 0 0 0 2px $tag-hover inset !important;
                    box-shadow: 0 0 0 2px var(--tag-hover) inset !important;
                }
            }

            &.tagify--invalid{
                > div{
                    &::before{
                        box-shadow: 0 0 0 2px $tag-invalid-color inset !important;
                        box-shadow: 0 0 0 2px var(--tag-invalid-color) inset !important;
                    }
                }
            }
        }

        > div{  // :not([contenteditable])
            vertical-align : top;
            box-sizing     : border-box;
            max-width      : 100%;
            padding        : $tag-pad;
            padding        : var(--tag-pad);
            color          : $tag-text-color;
            color          : var(--tag-text-color);
            line-height    : inherit;
            border-radius  : 3px;
            user-select    : none;
            transition     : .13s ease-out;

            > *{
                white-space    : nowrap;
                overflow       : hidden;
                text-overflow  : ellipsis;
                display        : inline-block;
                vertical-align : top;
                min-width      : var(--tag--min-width);
                max-width      : var(--tag--max-width);

                &[contenteditable]{
                    outline: none;
                    user-select: text;
                    cursor: text;
                    // fix: sometimes the caret after the last character wasn't visible (when setting {backspace:"edit"})
                    margin: -2px;
                    padding: 2px;
                }
            }

            @if $showX {
             //   padding-right:nth($tag-pad, 2) * 3;
            }

            &::before{
                content: '';
                position: absolute;
                border-radius: inherit;
                left:0; top:0; right:0; bottom:0;
                z-index: -1;
                pointer-events:none;
                transition: 120ms ease;
                animation : tags--bump .3s ease-out 1;

                box-shadow: 0 0 0 $tag-inset-shadow-size $tag-bg inset;
                box-shadow: 0 0 0 var(--tag-inset-shadow-size) var(--tag-bg) inset;
            }
        }

        &:hover:not([readonly]){
            div{  // :not([contenteditable])
                &::before{
                    $size: -$tagMargin/2;
                    $size: -2px;
                    top:$size; right:$size; bottom:$size; left:$size;
                    box-shadow: 0 0 0 $tag-inset-shadow-size $tag-hover inset;
                    box-shadow: 0 0 0 var(--tag-inset-shadow-size) var(--tag-hover) inset;
                  //  box-shadow: 0 0 0 0 $tag-remove inset
                }
                // background:nth($tagColor,2);
                //background:none;
                // box-shadow: 0 0 0 2px $tag-hover inset;
                // transition:50ms;
            }
        }

        &#{ $self }{
            &--noAnim{ animation:none; }

            &--hide{
                width          : 0 !important;
                padding-left   : 0;
                padding-right  : 0;
                margin-left    : 0;
                margin-right   : 0;
                opacity        : 0;
                transform      : scale(0);
                transition     : .3s;
                pointer-events : none;
            }

            &--mark{
                div::before{ animation:none; }
            }

            &--notAllowed{
                div{
                    > span{ opacity:.5; } // filter:blur(.2px);
                    &::before{
                        box-shadow: 0 0 0 $tag-inset-shadow-size $tag-invalid-bg inset !important;
                        box-shadow: 0 0 0 var(--tag-inset-shadow-size) var(--tag-invalid-bg) inset !important;
                        transition: .2s;
                    }
                }
            }
        }

        &[readonly]{
            #{ $self }__tag__removeBtn{ display:none; }
            > div{// padding: $tag-pad;
                &::before{
                    @include tagReadonlyBG;
                }
            }
        }
    }

    &__tag__removeBtn{
        $size: 14px;

        order         : 5;
        font          : #{$size}/#{$size + 2} Serif;
        background    : $tag-remove-btn-bg;
        background    : var(--tag-remove-btn-bg);
        color         : $tag-text-color;
        color         : var(--tag-text-color);
        width         : $size;
        height        : $size;
        text-align    : center;
        border-radius : 50px;
        cursor        : pointer;
        margin-right  : $size/3;
        margin-left   : -$size/3;
        transition    : .2s ease-out;

        &::after{
            content:"\00D7";
        }

        &:hover{
            color:white;
            background:$tag-remove-btn-bg--hover;
            background:var(--tag-remove-btn-bg--hover);
            // + span{ box-shadow: 0 0 0 2px $tag-remove inset; transition:.2s; }
            + div{
                > span{ opacity:.5; } // filter:blur(.2px);
                &::before{
                    box-shadow: 0 0 0 $tag-inset-shadow-size rgba($tag-remove, .3) inset !important;
                    box-shadow: 0 0 0 var(--tag-inset-shadow-size) var(--tag-remove-bg) inset !important;
                    transition:.2s;
                }
            }
        }
    }


    &:not(#{$self}--mix){
        #{ $self }__input{
            white-space: nowrap;
            // https://stackoverflow.com/a/13470210/104380
            br { display:none; }
            * { display:inline; white-space:nowrap; }
        }
    }

    ///////////////////////////////////////////
    // Holds the placeholder & the tags input
    &__input{
        $placeholder-width : 110px;
        @mixin placeholder-show{ opacity:.5; transform:none; };
        display: block;
        min-width: $placeholder-width;
        margin: $tagMargin;
        padding: $tag-pad;
        padding: var(--tag-pad, $tag-pad);
        line-height: inherit;
        position: relative;

        &::before{ display:inline-block; width:0; }

        &:empty::before{ @include placeholder; width:auto; }

        &:focus{ outline:none;
            &::before{ @include placeholder(false);
                @supports ( -moz-appearance:none ){
                    display:none;
                }
            }
            &:empty::before{ @include placeholder(true, .3);
                @supports ( -moz-appearance:none ){
                    display:inline-block;
                }
            }
        }
       // &:empty:focus{ padding:$tag-pad; }

        &::before{
            content: attr(data-placeholder);
            line-height: 1.8;
            position: absolute;
            top: 0;
            z-index: 1;
            color: $tag-text-color;
            white-space: nowrap;
            pointer-events: none;
            opacity: 0;
        }

        @supports ( -moz-appearance:none ){
            &::before{
                line-height: inherit;
                position:relative;
            }
        }

        // tries to suggest the rest of the value from the first item in the whitelist which matches it
        &::after{
            content: attr(data-suggest);
            color: $tag-text-color;
            opacity: .3;
            pointer-events:none;
        }

        // &--invalid{
        //     // color: $invalid-input-color;
        // }

        /*
            in "mix mode" the tags are inside the "input" element
        */
        #{ $self }__tag{
            margin: 0;
            // line-height: 1.1;

            > div{
                padding-top:0; padding-bottom:0;
            }

            &:hover:not([readonly]){
                > div{
                    &::before{
                    }
                }
            }
        }
    }

    &--mix #{ $self }__input{
        padding: $tagMargin;
        margin: 0;
        width: 100%;
        height: 100%;
        line-height: 1.7;
    }

    &--select{
        &::after{
            $size: 16px;
            content: '>';
            opacity: .5;
            position: absolute;
            top: 50%;
            right: 0;
            bottom: 0;
            font: $size monospace;
            line-height: $size/2;
            height: $size/2;
            pointer-events: none;
            transform: translate(-150%, -50%) scaleX(1.2) rotate(90deg);
            transition: .2s ease-in-out;
        }

        &[aria-expanded=true]{
            &::after{
                transform: translate(-150%, -50%) rotate(270deg) scaleY(1.2);
            }
        }

        #{$self}__tag{
            position: absolute;
            top: 0;
            right: 1.8em;
            bottom: 0;
            div{
                display: none;
            }
        }

        #{$self}__input{
            width: 100%;
        }
    }

    &--invalid{
        --tags-border-color : #{$tag-invalid-color};
    }

    // Since the dropdown is an external element, which is positioned directly on the body element
    // it cannot ingerit the CSS variables applied on the ".Tagify" element
    &__dropdown{
        position: absolute;
        z-index: 9999;
        background: white;

        max-height: 300px;
        overflow: auto;
        border: 1px solid $tags-focus-border-color;
        box-shadow: 0 2px 4px -2px rgba(black,.2);
        box-sizing: border-box;


        &__item{
            box-sizing: inherit;
            padding: .35em .6em;
            margin: 2px;
            cursor: pointer;
            border-radius: 3px;
            position: relative;
            outline:none;

            &--active{
                background:$tag-bg;
            }
            &:active{
                filter: brightness(105%);
            }
        }
    }
}