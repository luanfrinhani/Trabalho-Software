{"version":3,"sources":["MultipartUploader.js"],"names":["require","AbortController","createAbortError","delay","MB","defaultOptions","limit","retryDelays","getChunkSize","file","Math","ceil","size","onStart","onProgress","onPartComplete","onSuccess","onError","err","ensureInt","value","parseInt","TypeError","MultipartUploader","options","abortController","key","uploadId","parts","createdPromise","Promise","reject","isPaused","partsInProgress","chunks","chunkState","_initChunks","catch","_aborted","signal","aborted","desiredChunkSize","minChunkSize","max","chunkSize","push","i","end","min","slice","map","uploaded","busy","done","_createUpload","resolve","then","createMultipartUpload","result","valid","_uploadParts","_onError","_resumeUpload","listParts","forEach","part","PartNumber","Size","etag","ETag","some","p","need","every","state","_completeUpload","candidates","length","index","_uploadPartRetryable","_retryable","before","attempt","after","shouldRetry","source","status","doAttempt","retryAttempt","_uploadPart","body","prepareUploadPart","number","url","headers","_uploadPartBytes","_onPartProgress","sent","total","totalUploaded","reduce","n","c","_onPartComplete","defer","promise","xhr","XMLHttpRequest","open","Object","keys","setRequestHeader","responseType","cleanup","removeEventListener","onabort","abort","addEventListener","upload","ev","lengthComputable","loaded","target","error","Error","getResponseHeader","send","sort","a","b","completeMultipartUpload","_abortUpload","abortMultipartUpload","name","start","pause","opts","really","module","exports"],"mappings":"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","sourcesContent":["const { AbortController, createAbortError } = require('@uppy/utils/lib/AbortController')\nconst delay = require('@uppy/utils/lib/delay')\n\nconst MB = 1024 * 1024\n\nconst defaultOptions = {\n  limit: 1,\n  retryDelays: [0, 1000, 3000, 5000],\n  getChunkSize (file) {\n    return Math.ceil(file.size / 10000)\n  },\n  onStart () {},\n  onProgress () {},\n  onPartComplete () {},\n  onSuccess () {},\n  onError (err) {\n    throw err\n  },\n}\n\nfunction ensureInt (value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10)\n  }\n  if (typeof value === 'number') {\n    return value\n  }\n  throw new TypeError('Expected a number')\n}\n\nclass MultipartUploader {\n  constructor (file, options) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n    // Use default `getChunkSize` if it was null or something\n    if (!this.options.getChunkSize) {\n      this.options.getChunkSize = defaultOptions.getChunkSize\n    }\n\n    this.file = file\n    this.abortController = new AbortController()\n\n    this.key = this.options.key || null\n    this.uploadId = this.options.uploadId || null\n    this.parts = []\n\n    // Do `this.createdPromise.then(OP)` to execute an operation `OP` _only_ if the\n    // upload was created already. That also ensures that the sequencing is right\n    // (so the `OP` definitely happens if the upload is created).\n    //\n    // This mostly exists to make `_abortUpload` work well: only sending the abort request if\n    // the upload was already created, and if the createMultipartUpload request is still in flight,\n    // aborting it immediately after it finishes.\n    this.createdPromise = Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n    this.isPaused = false\n    this.partsInProgress = 0\n    this.chunks = null\n    this.chunkState = null\n\n    this._initChunks()\n\n    this.createdPromise.catch(() => {}) // silence uncaught rejection warning\n  }\n\n  /**\n   * Was this upload aborted?\n   *\n   * If yes, we may need to throw an AbortError.\n   *\n   * @returns {boolean}\n   */\n  _aborted () {\n    return this.abortController.signal.aborted\n  }\n\n  _initChunks () {\n    const chunks = []\n    const desiredChunkSize = this.options.getChunkSize(this.file)\n    // at least 5MB per request, at most 10k requests\n    const minChunkSize = Math.max(5 * MB, Math.ceil(this.file.size / 10000))\n    const chunkSize = Math.max(desiredChunkSize, minChunkSize)\n\n    // Upload zero-sized files in one zero-sized chunk\n    if (this.file.size === 0) {\n      chunks.push(this.file)\n    } else {\n      for (let i = 0; i < this.file.size; i += chunkSize) {\n        const end = Math.min(this.file.size, i + chunkSize)\n        chunks.push(this.file.slice(i, end))\n      }\n    }\n\n    this.chunks = chunks\n    this.chunkState = chunks.map(() => ({\n      uploaded: 0,\n      busy: false,\n      done: false,\n    }))\n  }\n\n  _createUpload () {\n    this.createdPromise = Promise.resolve().then(() =>\n      this.options.createMultipartUpload())\n    return this.createdPromise.then((result) => {\n      if (this._aborted()) throw createAbortError()\n\n      const valid = typeof result === 'object' && result\n        && typeof result.uploadId === 'string'\n        && typeof result.key === 'string'\n      if (!valid) {\n        throw new TypeError('AwsS3/Multipart: Got incorrect result from `createMultipartUpload()`, expected an object `{ uploadId, key }`.')\n      }\n\n      this.key = result.key\n      this.uploadId = result.uploadId\n\n      this.options.onStart(result)\n      this._uploadParts()\n    }).catch((err) => {\n      this._onError(err)\n    })\n  }\n\n  _resumeUpload () {\n    return Promise.resolve().then(() =>\n      this.options.listParts({\n        uploadId: this.uploadId,\n        key: this.key,\n      })).then((parts) => {\n      if (this._aborted()) throw createAbortError()\n\n      parts.forEach((part) => {\n        const i = part.PartNumber - 1\n\n        this.chunkState[i] = {\n          uploaded: ensureInt(part.Size),\n          etag: part.ETag,\n          done: true,\n        }\n\n        // Only add if we did not yet know about this part.\n        if (!this.parts.some((p) => p.PartNumber === part.PartNumber)) {\n          this.parts.push({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag,\n          })\n        }\n      })\n      this._uploadParts()\n    }).catch((err) => {\n      this._onError(err)\n    })\n  }\n\n  _uploadParts () {\n    if (this.isPaused) return\n\n    const need = this.options.limit - this.partsInProgress\n    if (need === 0) return\n\n    // All parts are uploaded.\n    if (this.chunkState.every((state) => state.done)) {\n      this._completeUpload()\n      return\n    }\n\n    const candidates = []\n    for (let i = 0; i < this.chunkState.length; i++) {\n      const state = this.chunkState[i]\n      if (state.done || state.busy) continue\n\n      candidates.push(i)\n      if (candidates.length >= need) {\n        break\n      }\n    }\n\n    candidates.forEach((index) => {\n      this._uploadPartRetryable(index).then(() => {\n        // Continue uploading parts\n        this._uploadParts()\n      }, (err) => {\n        this._onError(err)\n      })\n    })\n  }\n\n  _retryable ({ before, attempt, after }) {\n    const { retryDelays } = this.options\n    const { signal } = this.abortController\n\n    if (before) before()\n\n    function shouldRetry (err) {\n      if (err.source && typeof err.source.status === 'number') {\n        const { status } = err.source\n        // 0 probably indicates network failure\n        return status === 0 || status === 409 || status === 423 || (status >= 500 && status < 600)\n      }\n      return false\n    }\n\n    const doAttempt = (retryAttempt) =>\n      attempt().catch((err) => {\n        if (this._aborted()) throw createAbortError()\n\n        if (shouldRetry(err) && retryAttempt < retryDelays.length) {\n          return delay(retryDelays[retryAttempt], { signal })\n            .then(() => doAttempt(retryAttempt + 1))\n        }\n        throw err\n      })\n\n    return doAttempt(0).then((result) => {\n      if (after) after()\n      return result\n    }, (err) => {\n      if (after) after()\n      throw err\n    })\n  }\n\n  _uploadPartRetryable (index) {\n    return this._retryable({\n      before: () => {\n        this.partsInProgress += 1\n      },\n      attempt: () => this._uploadPart(index),\n      after: () => {\n        this.partsInProgress -= 1\n      },\n    })\n  }\n\n  _uploadPart (index) {\n    const body = this.chunks[index]\n    this.chunkState[index].busy = true\n\n    return Promise.resolve().then(() =>\n      this.options.prepareUploadPart({\n        key: this.key,\n        uploadId: this.uploadId,\n        body,\n        number: index + 1,\n      })).then((result) => {\n      const valid = typeof result === 'object' && result\n        && typeof result.url === 'string'\n      if (!valid) {\n        throw new TypeError('AwsS3/Multipart: Got incorrect result from `prepareUploadPart()`, expected an object `{ url }`.')\n      }\n\n      return result\n    }).then(({ url, headers }) => {\n      if (this._aborted()) {\n        this.chunkState[index].busy = false\n        throw createAbortError()\n      }\n\n      return this._uploadPartBytes(index, url, headers)\n    })\n  }\n\n  _onPartProgress (index, sent, total) {\n    this.chunkState[index].uploaded = ensureInt(sent)\n\n    const totalUploaded = this.chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.file.size)\n  }\n\n  _onPartComplete (index, etag) {\n    this.chunkState[index].etag = etag\n    this.chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag,\n    }\n    this.parts.push(part)\n\n    this.options.onPartComplete(part)\n  }\n\n  _uploadPartBytes (index, url, headers) {\n    const body = this.chunks[index]\n    const { signal } = this.abortController\n\n    let defer\n    const promise = new Promise((resolve, reject) => {\n      defer = { resolve, reject }\n    })\n\n    const xhr = new XMLHttpRequest()\n    xhr.open('PUT', url, true)\n    if (headers) {\n      Object.keys(headers).map((key) => {\n        xhr.setRequestHeader(key, headers[key])\n      })\n    }\n    xhr.responseType = 'text'\n\n    function cleanup () {\n      signal.removeEventListener('abort', onabort)\n    }\n    function onabort () {\n      xhr.abort()\n    }\n    signal.addEventListener('abort', onabort)\n\n    xhr.upload.addEventListener('progress', (ev) => {\n      if (!ev.lengthComputable) return\n\n      this._onPartProgress(index, ev.loaded, ev.total)\n    })\n\n    xhr.addEventListener('abort', (ev) => {\n      cleanup()\n      this.chunkState[index].busy = false\n\n      defer.reject(createAbortError())\n    })\n\n    xhr.addEventListener('load', (ev) => {\n      cleanup()\n      this.chunkState[index].busy = false\n\n      if (ev.target.status < 200 || ev.target.status >= 300) {\n        const error = new Error('Non 2xx')\n        error.source = ev.target\n        defer.reject(error)\n        return\n      }\n\n      this._onPartProgress(index, body.size, body.size)\n\n      // NOTE This must be allowed by CORS.\n      const etag = ev.target.getResponseHeader('ETag')\n      if (etag === null) {\n        defer.reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'))\n        return\n      }\n\n      this._onPartComplete(index, etag)\n      defer.resolve()\n    })\n\n    xhr.addEventListener('error', (ev) => {\n      cleanup()\n      this.chunkState[index].busy = false\n\n      const error = new Error('Unknown error')\n      error.source = ev.target\n      defer.reject(error)\n    })\n\n    xhr.send(body)\n\n    return promise\n  }\n\n  _completeUpload () {\n    // Parts may not have completed uploading in sorted order, if limit > 1.\n    this.parts.sort((a, b) => a.PartNumber - b.PartNumber)\n\n    return Promise.resolve().then(() =>\n      this.options.completeMultipartUpload({\n        key: this.key,\n        uploadId: this.uploadId,\n        parts: this.parts,\n      })).then((result) => {\n      this.options.onSuccess(result)\n    }, (err) => {\n      this._onError(err)\n    })\n  }\n\n  _abortUpload () {\n    this.abortController.abort()\n\n    this.createdPromise.then(() => {\n      this.options.abortMultipartUpload({\n        key: this.key,\n        uploadId: this.uploadId,\n      })\n    }, () => {\n      // if the creation failed we do not need to abort\n    })\n  }\n\n  _onError (err) {\n    if (err && err.name === 'AbortError') {\n      return\n    }\n\n    this.options.onError(err)\n  }\n\n  start () {\n    this.isPaused = false\n    if (this.uploadId) {\n      this._resumeUpload()\n    } else {\n      this._createUpload()\n    }\n  }\n\n  pause () {\n    this.abortController.abort()\n    // Swap it out for a new controller, because this instance may be resumed later.\n    this.abortController = new AbortController()\n\n    this.isPaused = true\n  }\n\n  abort (opts = {}) {\n    const really = opts.really || false\n\n    if (!really) return this.pause()\n\n    this._abortUpload()\n  }\n}\n\nmodule.exports = MultipartUploader\n"]}