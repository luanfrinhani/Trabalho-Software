{"version":3,"sources":["index.js"],"names":["toArray","require","getRelativePath","getFilesAndDirectoriesFromDirectory","module","exports","webkitGetAsEntryApi","dataTransfer","logDropError","files","rootPromises","createPromiseToAddFileOrParseDirectory","entry","Promise","resolve","isFile","file","relativePath","push","error","isDirectory","directoryReader","createReader","onSuccess","entries","promises","map","all","then","items","forEach","item","webkitGetAsEntry"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAME,mCAAmC,GAAGF,OAAO,CAAC,uCAAD,CAAnD;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA8BC,YAA9B,EAA4CC,YAA5C,EAA0D;AACzE,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,MAAMC,sCAAsC,GAAG,SAAzCA,sCAAyC,CAACC,KAAD;AAAA,WAC7C,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACvB;AACA,UAAIF,KAAK,CAACG,MAAV,EAAkB;AAChB;AACAH,QAAAA,KAAK,CAACI,IAAN,CACE,UAACA,IAAD,EAAU;AACRA,UAAAA,IAAI,CAACC,YAAL,GAAoBf,eAAe,CAACU,KAAD,CAAnC;AACAH,UAAAA,KAAK,CAACS,IAAN,CAAWF,IAAX;AACAF,UAAAA,OAAO;AACR,SALH,EAME;AACA,kBAACK,KAAD,EAAW;AACTX,UAAAA,YAAY,CAACW,KAAD,CAAZ;AACAL,UAAAA,OAAO;AACR,SAVH,EAFgB,CAclB;AACC,OAfD,MAeO,IAAIF,KAAK,CAACQ,WAAV,EAAuB;AAC5B,YAAMC,eAAe,GAAGT,KAAK,CAACU,YAAN,EAAxB;AACAnB,QAAAA,mCAAmC,CAACkB,eAAD,EAAkB,EAAlB,EAAsBb,YAAtB,EAAoC;AACrEe,UAAAA,SAAS,EAAE,mBAACC,OAAD,EAAa;AACtB,gBAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAY,UAACd,KAAD;AAAA,qBAAWD,sCAAsC,CAACC,KAAD,CAAjD;AAAA,aAAZ,CAAjB;AACAC,YAAAA,OAAO,CAACc,GAAR,CAAYF,QAAZ,EAAsBG,IAAtB,CAA2B;AAAA,qBAAMd,OAAO,EAAb;AAAA,aAA3B;AACD;AAJoE,SAApC,CAAnC;AAMD;AACF,KA1BD,CAD6C;AAAA,GAA/C,CAXyE,CAwCzE;;;AACAd,EAAAA,OAAO,CAACO,YAAY,CAACsB,KAAd,CAAP,CACGC,OADH,CACW,UAACC,IAAD,EAAU;AACjB,QAAMnB,KAAK,GAAGmB,IAAI,CAACC,gBAAL,EAAd,CADiB,CAEjB;;AACA,QAAIpB,KAAJ,EAAW;AACTF,MAAAA,YAAY,CAACQ,IAAb,CAAkBP,sCAAsC,CAACC,KAAD,CAAxD;AACD;AACF,GAPH;AASA,SAAOC,OAAO,CAACc,GAAR,CAAYjB,YAAZ,EACJkB,IADI,CACC;AAAA,WAAMnB,KAAN;AAAA,GADD,CAAP;AAED,CApDD","sourcesContent":["const toArray = require('../../../toArray')\nconst getRelativePath = require('./getRelativePath')\nconst getFilesAndDirectoriesFromDirectory = require('./getFilesAndDirectoriesFromDirectory')\n\nmodule.exports = function webkitGetAsEntryApi (dataTransfer, logDropError) {\n  const files = []\n\n  const rootPromises = []\n\n  /**\n   * Returns a resolved promise, when :files array is enhanced\n   *\n   * @param {(FileSystemFileEntry|FileSystemDirectoryEntry)} entry\n   * @returns {Promise} - empty promise that resolves when :files is enhanced with a file\n   */\n  const createPromiseToAddFileOrParseDirectory = (entry) =>\n    new Promise((resolve) => {\n      // This is a base call\n      if (entry.isFile) {\n        // Creates a new File object which can be used to read the file.\n        entry.file(\n          (file) => {\n            file.relativePath = getRelativePath(entry)\n            files.push(file)\n            resolve()\n          },\n          // Make sure we resolve on error anyway, it's fine if only one file couldn't be read!\n          (error) => {\n            logDropError(error)\n            resolve()\n          }\n        )\n      // This is a recursive call\n      } else if (entry.isDirectory) {\n        const directoryReader = entry.createReader()\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: (entries) => {\n            const promises = entries.map((entry) => createPromiseToAddFileOrParseDirectory(entry))\n            Promise.all(promises).then(() => resolve())\n          },\n        })\n      }\n    })\n\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  toArray(dataTransfer.items)\n    .forEach((item) => {\n      const entry = item.webkitGetAsEntry()\n      // :entry can be null when we drop the url e.g.\n      if (entry) {\n        rootPromises.push(createPromiseToAddFileOrParseDirectory(entry))\n      }\n    })\n\n  return Promise.all(rootPromises)\n    .then(() => files)\n}\n"]}