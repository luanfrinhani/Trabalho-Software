{"version":3,"sources":["canvasToBlob.js"],"names":["dataURItoBlob","require","module","exports","canvasToBlob","canvas","type","quality","toBlob","Promise","resolve","then","toDataURL"],"mappings":"AAAA,IAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,OAArC,EAA8C;AAC7D,MAAIF,MAAM,CAACG,MAAX,EAAmB;AACjB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BL,MAAAA,MAAM,CAACG,MAAP,CAAcE,OAAd,EAAuBJ,IAAvB,EAA6BC,OAA7B;AACD,KAFM,CAAP;AAGD;;AACD,SAAOE,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AAClC,WAAOX,aAAa,CAACK,MAAM,CAACO,SAAP,CAAiBN,IAAjB,EAAuBC,OAAvB,CAAD,EAAkC,EAAlC,CAApB;AACD,GAFM,CAAP;AAGD,CATD","sourcesContent":["const dataURItoBlob = require('./dataURItoBlob')\n\n/**\n * Save a <canvas> element's content to a Blob object.\n *\n * @param {HTMLCanvasElement} canvas\n * @returns {Promise}\n */\nmodule.exports = function canvasToBlob (canvas, type, quality) {\n  if (canvas.toBlob) {\n    return new Promise((resolve) => {\n      canvas.toBlob(resolve, type, quality)\n    })\n  }\n  return Promise.resolve().then(() => {\n    return dataURItoBlob(canvas.toDataURL(type, quality), {})\n  })\n}\n"]}