{"version":3,"sources":["generateFileID.js"],"names":["module","exports","generateFileID","file","id","name","encodeFilename","toLowerCase","type","undefined","meta","relativePath","data","size","lastModified","suffix","replace","character","encodeCharacter","charCodeAt","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAyBC,IAAzB,EAA+B;AAC9C;AACA;AAEA,MAAIC,EAAE,GAAG,MAAT;;AACA,MAAI,OAAOD,IAAI,CAACE,IAAZ,KAAqB,QAAzB,EAAmC;AACjCD,IAAAA,EAAE,UAAQE,cAAc,CAACH,IAAI,CAACE,IAAL,CAAUE,WAAV,EAAD,CAAxB;AACD;;AAED,MAAIJ,IAAI,CAACK,IAAL,KAAcC,SAAlB,EAA6B;AAC3BL,IAAAA,EAAE,UAAQD,IAAI,CAACK,IAAf;AACD;;AAED,MAAIL,IAAI,CAACO,IAAL,IAAa,OAAOP,IAAI,CAACO,IAAL,CAAUC,YAAjB,KAAkC,QAAnD,EAA6D;AAC3DP,IAAAA,EAAE,UAAQE,cAAc,CAACH,IAAI,CAACO,IAAL,CAAUC,YAAV,CAAuBJ,WAAvB,EAAD,CAAxB;AACD;;AAED,MAAIJ,IAAI,CAACS,IAAL,CAAUC,IAAV,KAAmBJ,SAAvB,EAAkC;AAChCL,IAAAA,EAAE,UAAQD,IAAI,CAACS,IAAL,CAAUC,IAApB;AACD;;AACD,MAAIV,IAAI,CAACS,IAAL,CAAUE,YAAV,KAA2BL,SAA/B,EAA0C;AACxCL,IAAAA,EAAE,UAAQD,IAAI,CAACS,IAAL,CAAUE,YAApB;AACD;;AAED,SAAOV,EAAP;AACD,CAzBD;;AA2BA,SAASE,cAAT,CAAyBD,IAAzB,EAA+B;AAC7B,MAAIU,MAAM,GAAG,EAAb;AACA,SAAOV,IAAI,CAACW,OAAL,CAAa,aAAb,EAA4B,UAACC,SAAD,EAAe;AAChDF,IAAAA,MAAM,UAAQG,eAAe,CAACD,SAAD,CAA7B;AACA,WAAO,GAAP;AACD,GAHM,IAGFF,MAHL;AAID;;AAED,SAASG,eAAT,CAA0BD,SAA1B,EAAqC;AACnC,SAAOA,SAAS,CAACE,UAAV,CAAqB,CAArB,EAAwBC,QAAxB,CAAiC,EAAjC,CAAP;AACD","sourcesContent":["/**\n * Takes a file object and turns it into fileID, by converting file.name to lowercase,\n * removing extra characters and adding type, size and lastModified\n *\n * @param {object} file\n * @returns {string} the fileID\n */\nmodule.exports = function generateFileID (file) {\n  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that\n  // is slower! simple string concatenation is fast\n\n  let id = 'uppy'\n  if (typeof file.name === 'string') {\n    id += `-${encodeFilename(file.name.toLowerCase())}`\n  }\n\n  if (file.type !== undefined) {\n    id += `-${file.type}`\n  }\n\n  if (file.meta && typeof file.meta.relativePath === 'string') {\n    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`\n  }\n\n  if (file.data.size !== undefined) {\n    id += `-${file.data.size}`\n  }\n  if (file.data.lastModified !== undefined) {\n    id += `-${file.data.lastModified}`\n  }\n\n  return id\n}\n\nfunction encodeFilename (name) {\n  let suffix = ''\n  return name.replace(/[^A-Z0-9]/ig, (character) => {\n    suffix += `-${encodeCharacter(character)}`\n    return '/'\n  }) + suffix\n}\n\nfunction encodeCharacter (character) {\n  return character.charCodeAt(0).toString(32)\n}\n"]}