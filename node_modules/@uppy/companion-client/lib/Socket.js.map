{"version":3,"sources":["Socket.js"],"names":["ee","require","module","exports","opts","_queued","isOpen","emitter","_handleMessage","bind","close","emit","on","once","send","autoOpen","open","socket","WebSocket","target","onopen","e","length","first","action","payload","slice","onclose","onmessage","push","JSON","stringify","handler","message","parse","data","err","console","log"],"mappings":"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","sourcesContent":["const ee = require('namespace-emitter')\n\nmodule.exports = class UppySocket {\n  constructor (opts) {\n    this.opts = opts\n    this._queued = []\n    this.isOpen = false\n    this.emitter = ee()\n\n    this._handleMessage = this._handleMessage.bind(this)\n\n    this.close = this.close.bind(this)\n    this.emit = this.emit.bind(this)\n    this.on = this.on.bind(this)\n    this.once = this.once.bind(this)\n    this.send = this.send.bind(this)\n\n    if (!opts || opts.autoOpen !== false) {\n      this.open()\n    }\n  }\n\n  open () {\n    this.socket = new WebSocket(this.opts.target)\n\n    this.socket.onopen = (e) => {\n      this.isOpen = true\n\n      while (this._queued.length > 0 && this.isOpen) {\n        const first = this._queued[0]\n        this.send(first.action, first.payload)\n        this._queued = this._queued.slice(1)\n      }\n    }\n\n    this.socket.onclose = (e) => {\n      this.isOpen = false\n    }\n\n    this.socket.onmessage = this._handleMessage\n  }\n\n  close () {\n    if (this.socket) {\n      this.socket.close()\n    }\n  }\n\n  send (action, payload) {\n    // attach uuid\n\n    if (!this.isOpen) {\n      this._queued.push({ action, payload })\n      return\n    }\n\n    this.socket.send(JSON.stringify({\n      action,\n      payload,\n    }))\n  }\n\n  on (action, handler) {\n    this.emitter.on(action, handler)\n  }\n\n  emit (action, payload) {\n    this.emitter.emit(action, payload)\n  }\n\n  once (action, handler) {\n    this.emitter.once(action, handler)\n  }\n\n  _handleMessage (e) {\n    try {\n      const message = JSON.parse(e.data)\n      this.emit(message.action, message.payload)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n}\n"]}