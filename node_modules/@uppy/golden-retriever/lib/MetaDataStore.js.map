{"version":3,"sources":["MetaDataStore.js"],"names":["findUppyInstances","instances","i","localStorage","length","key","test","push","slice","maybeParse","str","JSON","parse","err","cleanedUp","module","exports","opts","expires","name","storeName","MetaDataStore","cleanup","load","savedState","getItem","data","metadata","save","Date","now","state","stringify","setItem","instanceIDs","forEach","id","obj","removeItem"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,iBAAT,GAA8B;AAC5B,MAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,YAAY,CAACC,MAAjC,EAAyCF,CAAC,EAA1C,EAA8C;AAC5C,QAAMG,GAAG,GAAGF,YAAY,CAACE,GAAb,CAAiBH,CAAjB,CAAZ;;AACA,QAAI,cAAcI,IAAd,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3BJ,MAAAA,SAAS,CAACM,IAAV,CAAeF,GAAG,CAACG,KAAJ,CAAU,aAAaJ,MAAvB,CAAf;AACD;AACF;;AACD,SAAOH,SAAP;AACD;AAED;AACA;AACA;;;AACA,SAASQ,UAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAP;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACF;;AAED,IAAIC,SAAS,GAAG,KAAhB;;AACAC,MAAM,CAACC,OAAP;AACE,yBAAaC,IAAb,EAAmB;AACjB,SAAKA,IAAL;AACEC,MAAAA,OAAO,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe;AAD1B,OAEKD,IAFL;AAIA,SAAKE,IAAL,kBAAyBF,IAAI,CAACG,SAA9B;;AAEA,QAAI,CAACN,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAG,IAAZ;AACAO,MAAAA,aAAa,CAACC,OAAd;AACD;AACF;AAED;AACF;AACA;;;AAhBA;;AAAA,SAiBEC,IAjBF,GAiBE,gBAAQ;AACN,QAAMC,UAAU,GAAGrB,YAAY,CAACsB,OAAb,CAAqB,KAAKN,IAA1B,CAAnB;AACA,QAAI,CAACK,UAAL,EAAiB,OAAO,IAAP;AACjB,QAAME,IAAI,GAAGjB,UAAU,CAACe,UAAD,CAAvB;AACA,QAAI,CAACE,IAAL,EAAW,OAAO,IAAP,CAJL,CAMN;AACA;;AACA,QAAI,CAACA,IAAI,CAACC,QAAV,EAAoB;AAClB,WAAKC,IAAL,CAAUF,IAAV;AACA,aAAOA,IAAP;AACD;;AAED,WAAOA,IAAI,CAACC,QAAZ;AACD,GA/BH;;AAAA,SAiCEC,IAjCF,GAiCE,cAAMD,QAAN,EAAgB;AACd,QAAMT,OAAO,GAAGW,IAAI,CAACC,GAAL,KAAa,KAAKb,IAAL,CAAUC,OAAvC;AACA,QAAMa,KAAK,GAAGpB,IAAI,CAACqB,SAAL,CAAe;AAC3BL,MAAAA,QAAQ,EAARA,QAD2B;AAE3BT,MAAAA,OAAO,EAAPA;AAF2B,KAAf,CAAd;AAIAf,IAAAA,YAAY,CAAC8B,OAAb,CAAqB,KAAKd,IAA1B,EAAgCY,KAAhC;AACD;AAED;AACF;AACA;AA5CA;;AAAA,gBA6CST,OA7CT,GA6CE,mBAAkB;AAChB,QAAMY,WAAW,GAAGlC,iBAAiB,EAArC;AACA,QAAM8B,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;AACAI,IAAAA,WAAW,CAACC,OAAZ,CAAoB,UAACC,EAAD,EAAQ;AAC1B,UAAMV,IAAI,GAAGvB,YAAY,CAACsB,OAAb,gBAAkCW,EAAlC,CAAb;AACA,UAAI,CAACV,IAAL,EAAW,OAAO,IAAP;AACX,UAAMW,GAAG,GAAG5B,UAAU,CAACiB,IAAD,CAAtB;AACA,UAAI,CAACW,GAAL,EAAU,OAAO,IAAP;;AAEV,UAAIA,GAAG,CAACnB,OAAJ,IAAemB,GAAG,CAACnB,OAAJ,GAAcY,GAAjC,EAAsC;AACpC3B,QAAAA,YAAY,CAACmC,UAAb,gBAAqCF,EAArC;AACD;AACF,KATD;AAUD,GA1DH;;AAAA;AAAA","sourcesContent":["/**\n * Get uppy instance IDs for which state is stored.\n */\nfunction findUppyInstances () {\n  const instances = []\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i)\n    if (/^uppyState:/.test(key)) {\n      instances.push(key.slice('uppyState:'.length))\n    }\n  }\n  return instances\n}\n\n/**\n * Try to JSON-parse a string, return null on failure.\n */\nfunction maybeParse (str) {\n  try {\n    return JSON.parse(str)\n  } catch (err) {\n    return null\n  }\n}\n\nlet cleanedUp = false\nmodule.exports = class MetaDataStore {\n  constructor (opts) {\n    this.opts = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      ...opts,\n    }\n    this.name = `uppyState:${opts.storeName}`\n\n    if (!cleanedUp) {\n      cleanedUp = true\n      MetaDataStore.cleanup()\n    }\n  }\n\n  /**\n   *\n   */\n  load () {\n    const savedState = localStorage.getItem(this.name)\n    if (!savedState) return null\n    const data = maybeParse(savedState)\n    if (!data) return null\n\n    // Upgrade pre-0.20.0 uppyState: it used to be just a flat object,\n    // without `expires`.\n    if (!data.metadata) {\n      this.save(data)\n      return data\n    }\n\n    return data.metadata\n  }\n\n  save (metadata) {\n    const expires = Date.now() + this.opts.expires\n    const state = JSON.stringify({\n      metadata,\n      expires,\n    })\n    localStorage.setItem(this.name, state)\n  }\n\n  /**\n   * Remove all expired state.\n   */\n  static cleanup () {\n    const instanceIDs = findUppyInstances()\n    const now = Date.now()\n    instanceIDs.forEach((id) => {\n      const data = localStorage.getItem(`uppyState:${id}`)\n      if (!data) return null\n      const obj = maybeParse(data)\n      if (!obj) return null\n\n      if (obj.expires && obj.expires < now) {\n        localStorage.removeItem(`uppyState:${id}`)\n      }\n    })\n  }\n}\n"]}