{"version":3,"sources":["index.js"],"names":["require","Plugin","ServiceWorkerStore","IndexedDBStore","MetaDataStore","module","exports","uppy","opts","type","id","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","loadFilesStateFromLocalStorage","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","onBlobsLoaded","savedState","load","log","setState","currentUploads","files","savedPluginData","pluginData","getWaitingFiles","waitingFiles","getFiles","forEach","file","progress","uploadStarted","getUploadingFiles","uploadingFiles","getState","uploadIDs","Object","keys","uploadID","filesInUpload","fileIDs","fileID","getFile","filesToSave","emit","data","save","list","then","blobs","numberOfFilesRecovered","length","numberOfFilesTryingToRecover","info","catch","err","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isRestored","updatedFile","deleteBlobs","promises","delete","Promise","all","install","on","isRemote","put","successful","map","uploadId","restore","VERSION"],"mappings":"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","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst ServiceWorkerStore = require('./ServiceWorkerStore')\nconst IndexedDBStore = require('./IndexedDBStore')\nconst MetaDataStore = require('./MetaDataStore')\n\n/**\n * The GoldenRetriever plugin â€” restores selected files and resumes uploads\n * after a closed tab or a browser crash!\n *\n * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n * https://uppy.io/blog/2017/07/golden-retriever/\n */\nmodule.exports = class GoldenRetriever extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'debugger'\n    this.id = this.opts.id || 'GoldenRetriever'\n    this.title = 'Golden Retriever'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID(),\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore({\n      expires: this.opts.expires,\n      ...this.opts.indexedDB || {},\n      storeName: uppy.getID(),\n    })\n\n    this.saveFilesStateToLocalStorage = this.saveFilesStateToLocalStorage.bind(this)\n    this.loadFilesStateFromLocalStorage = this.loadFilesStateFromLocalStorage.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  loadFilesStateFromLocalStorage () {\n    const savedState = this.MetaDataStore.load()\n\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {},\n      })\n\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    this.uppy.getFiles().forEach((file) => {\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[file.id] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = Object.assign(\n      this.getWaitingFiles(),\n      this.getUploadingFiles()\n    )\n\n    const pluginData = {}\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    const { currentUploads } = this.uppy.getState()\n    this.MetaDataStore.save({\n      currentUploads,\n      files: filesToSave,\n      pluginData,\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    this.ServiceWorkerStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      const numberOfFilesTryingToRecover = this.uppy.getFiles().length\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        this.uppy.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        return this.onBlobsLoaded(blobs)\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\n      return this.loadFileBlobsFromIndexedDB()\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\n        this.uppy.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        return this.onBlobsLoaded(blobs)\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = { ...this.uppy.getState().files }\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true,\n      }\n      const updatedFile = { ...originalFile, ...updatedFileData }\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.uppy.setState({\n      files: updatedFiles,\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\n        this.uppy.log(err)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    const promises = []\n    fileIDs.forEach((id) => {\n      if (this.ServiceWorkerStore) {\n        promises.push(this.ServiceWorkerStore.delete(id))\n      }\n      if (this.IndexedDBStore) {\n        promises.push(this.IndexedDBStore.delete(id))\n      }\n    })\n    return Promise.all(promises)\n  }\n\n  install () {\n    this.loadFilesStateFromLocalStorage()\n\n    if (this.uppy.getFiles().length > 0) {\n      if (this.ServiceWorkerStore) {\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Service Worker...')\n        this.loadFileBlobsFromServiceWorker()\n      } else {\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Indexed DB...')\n        this.loadFileBlobsFromIndexedDB()\n      }\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\n      this.onBlobsLoaded([])\n    }\n\n    this.uppy.on('file-added', (file) => {\n      if (file.isRemote) return\n\n      if (this.ServiceWorkerStore) {\n        this.ServiceWorkerStore.put(file).catch((err) => {\n          this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n          this.uppy.log(err)\n        })\n      }\n\n      this.IndexedDBStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    })\n\n    this.uppy.on('file-removed', (file) => {\n      if (this.ServiceWorkerStore) {\n        this.ServiceWorkerStore.delete(file.id).catch((err) => {\n          this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n          this.uppy.log(err)\n        })\n      }\n      this.IndexedDBStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    })\n\n    this.uppy.on('complete', ({ successful }) => {\n      const fileIDs = successful.map((file) => file.id)\n      this.deleteBlobs(fileIDs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\n        this.uppy.log(err)\n      })\n    })\n\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n\n    this.uppy.on('restored', () => {\n      // start all uploads again when file blobs are restored\n      const { currentUploads } = this.uppy.getState()\n      if (currentUploads) {\n        Object.keys(currentUploads).forEach((uploadId) => {\n          this.uppy.restore(uploadId, currentUploads[uploadId])\n        })\n      }\n    })\n  }\n}\n"]}