{"version":3,"sources":["IndexedDBStore.js"],"names":["prettierBytes","require","indexedDB","window","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","isSupported","DB_NAME","STORE_NAME","DEFAULT_EXPIRY","DB_VERSION","migrateExpiration","store","request","openCursor","onsuccess","event","cursor","target","result","entry","value","expires","Date","now","update","connect","dbName","open","Promise","resolve","reject","onupgradeneeded","db","transaction","currentTarget","oldVersion","createObjectStore","keyPath","createIndex","unique","objectStore","oncomplete","onerror","waitForRequest","cleanedUp","IndexedDBStore","opts","storeName","maxFileSize","maxTotalSize","name","createConnection","ready","cleanup","then","key","fileID","list","index","getAll","IDBKeyRange","only","files","forEach","file","data","get","id","getSize","size","continue","Error","put","add","delete","upperBound","console","log","close","module","exports"],"mappings":"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","sourcesContent":["const prettierBytes = require('@transloadit/prettier-bytes')\n\nconst indexedDB = typeof window !== 'undefined'\n  && (window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB)\n\nconst isSupported = !!indexedDB\n\nconst DB_NAME = 'uppy-blobs'\nconst STORE_NAME = 'files' // maybe have a thumbnail store in the future\nconst DEFAULT_EXPIRY = 24 * 60 * 60 * 1000 // 24 hours\nconst DB_VERSION = 3\n\n// Set default `expires` dates on existing stored blobs.\nfunction migrateExpiration (store) {\n  const request = store.openCursor()\n  request.onsuccess = (event) => {\n    const cursor = event.target.result\n    if (!cursor) {\n      return\n    }\n    const entry = cursor.value\n    entry.expires = Date.now() + DEFAULT_EXPIRY\n    cursor.update(entry)\n  }\n}\n\nfunction connect (dbName) {\n  const request = indexedDB.open(dbName, DB_VERSION)\n  return new Promise((resolve, reject) => {\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result\n      const transaction = event.currentTarget.transaction\n\n      if (event.oldVersion < 2) {\n        // Added in v2: DB structure changed to a single shared object store\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' })\n        store.createIndex('store', 'store', { unique: false })\n      }\n\n      if (event.oldVersion < 3) {\n        // Added in v3\n        const store = transaction.objectStore(STORE_NAME)\n        store.createIndex('expires', 'expires', { unique: false })\n\n        migrateExpiration(store)\n      }\n\n      transaction.oncomplete = () => {\n        resolve(db)\n      }\n    }\n    request.onsuccess = (event) => {\n      resolve(event.target.result)\n    }\n    request.onerror = reject\n  })\n}\n\nfunction waitForRequest (request) {\n  return new Promise((resolve, reject) => {\n    request.onsuccess = (event) => {\n      resolve(event.target.result)\n    }\n    request.onerror = reject\n  })\n}\n\nlet cleanedUp = false\nclass IndexedDBStore {\n  constructor (opts) {\n    this.opts = {\n      dbName: DB_NAME,\n      storeName: 'default',\n      expires: DEFAULT_EXPIRY, // 24 hours\n      maxFileSize: 10 * 1024 * 1024, // 10 MB\n      maxTotalSize: 300 * 1024 * 1024, // 300 MB\n      ...opts,\n    }\n\n    this.name = this.opts.storeName\n\n    const createConnection = () => {\n      return connect(this.opts.dbName)\n    }\n\n    if (!cleanedUp) {\n      cleanedUp = true\n      this.ready = IndexedDBStore.cleanup()\n        .then(createConnection, createConnection)\n    } else {\n      this.ready = createConnection()\n    }\n  }\n\n  key (fileID) {\n    return `${this.name}!${fileID}`\n  }\n\n  /**\n   * List all file blobs currently in the store.\n   */\n  list () {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readonly')\n      const store = transaction.objectStore(STORE_NAME)\n      const request = store.index('store')\n        .getAll(IDBKeyRange.only(this.name))\n      return waitForRequest(request)\n    }).then((files) => {\n      const result = {}\n      files.forEach((file) => {\n        result[file.fileID] = file.data\n      })\n      return result\n    })\n  }\n\n  /**\n   * Get one file blob from the store.\n   */\n  get (fileID) {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readonly')\n      const request = transaction.objectStore(STORE_NAME)\n        .get(this.key(fileID))\n      return waitForRequest(request)\n    }).then((result) => ({\n      id: result.data.fileID,\n      data: result.data.data,\n    }))\n  }\n\n  /**\n   * Get the total size of all stored files.\n   *\n   * @private\n   */\n  getSize () {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readonly')\n      const store = transaction.objectStore(STORE_NAME)\n      const request = store.index('store')\n        .openCursor(IDBKeyRange.only(this.name))\n      return new Promise((resolve, reject) => {\n        let size = 0\n        request.onsuccess = (event) => {\n          const cursor = event.target.result\n          if (cursor) {\n            size += cursor.value.data.size\n            cursor.continue()\n          } else {\n            resolve(size)\n          }\n        }\n        request.onerror = () => {\n          reject(new Error('Could not retrieve stored blobs size'))\n        }\n      })\n    })\n  }\n\n  /**\n   * Save a file in the store.\n   */\n  put (file) {\n    if (file.data.size > this.opts.maxFileSize) {\n      return Promise.reject(new Error('File is too big to store.'))\n    }\n    return this.getSize().then((size) => {\n      if (size > this.opts.maxTotalSize) {\n        return Promise.reject(new Error('No space left'))\n      }\n      return this.ready\n    }).then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite')\n      const request = transaction.objectStore(STORE_NAME).add({\n        id: this.key(file.id),\n        fileID: file.id,\n        store: this.name,\n        expires: Date.now() + this.opts.expires,\n        data: file.data,\n      })\n      return waitForRequest(request)\n    })\n  }\n\n  /**\n   * Delete a file blob from the store.\n   */\n  delete (fileID) {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite')\n      const request = transaction.objectStore(STORE_NAME)\n        .delete(this.key(fileID))\n      return waitForRequest(request)\n    })\n  }\n\n  /**\n   * Delete all stored blobs that have an expiry date that is before Date.now().\n   * This is a static method because it deletes expired blobs from _all_ Uppy instances.\n   */\n  static cleanup () {\n    return connect(DB_NAME).then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite')\n      const store = transaction.objectStore(STORE_NAME)\n      const request = store.index('expires')\n        .openCursor(IDBKeyRange.upperBound(Date.now()))\n      return new Promise((resolve, reject) => {\n        request.onsuccess = (event) => {\n          const cursor = event.target.result\n          if (cursor) {\n            const entry = cursor.value\n            console.log(\n              '[IndexedDBStore] Deleting record', entry.fileID,\n              'of size', prettierBytes(entry.data.size),\n              '- expired on', new Date(entry.expires)\n            )\n            cursor.delete() // Ignoring return value … it's not terrible if this goes wrong.\n            cursor.continue()\n          } else {\n            resolve(db)\n          }\n        }\n        request.onerror = reject\n      })\n    }).then((db) => {\n      db.close()\n    })\n  }\n}\n\nIndexedDBStore.isSupported = isSupported\n\nmodule.exports = IndexedDBStore\n"]}