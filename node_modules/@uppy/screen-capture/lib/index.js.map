{"version":3,"sources":["index.js"],"names":["require","h","Plugin","Translator","getFileTypeExtension","ScreenRecIcon","CaptureScreen","getMediaDevices","navigator","mediaDevices","getDisplayMedia","window","MediaRecorder","module","exports","uppy","opts","protocol","location","match","id","title","type","icon","defaultLocale","strings","startCapturing","stopCapturing","submitRecordedFile","streamActive","streamPassive","micDisabled","recording","defaultOptions","displayMediaConstraints","video","width","height","frameRate","ideal","max","cursor","displaySurface","userMediaConstraints","audio","preferredVideoMimeType","translator","locale","i18n","translate","bind","i18nArray","translateArray","install","setPluginState","render","start","stop","startRecording","stopRecording","submit","streamInterrupted","streamInactivated","captureActive","capturedMediaFile","log","audioStreamActive","target","mount","uninstall","videoStream","unmount","Promise","reject","Error","selectAudioStreamSource","selectVideoStreamSource","then","res","parent","hideAllPanels","resolve","addEventListener","event","catch","err","screenRecError","userDenied","setTimeout","audioStream","getUserMedia","name","info","options","recordingChunks","isTypeSupported","mimeType","tracks","getVideoTracks","push","getAudioTracks","outputStream","MediaStream","recorder","data","getPluginState","recordedVideo","stopped","getVideo","file","URL","createObjectURL","error","addFile","isRestriction","forEach","track","fileExtension","Date","now","blob","Blob","source","state","recorderState","VERSION"],"mappings":"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","sourcesContent":["const { h } = require('preact')\nconst { Plugin } = require('@uppy/core')\nconst Translator = require('@uppy/utils/lib/Translator')\nconst getFileTypeExtension = require('@uppy/utils/lib/getFileTypeExtension')\nconst ScreenRecIcon = require('./ScreenRecIcon')\nconst CaptureScreen = require('./CaptureScreen')\n\n// Adapted from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\nfunction getMediaDevices () {\n  // check if screen capturing is supported\n  /* eslint-disable */\n  if (navigator &&\n    navigator.mediaDevices &&\n    navigator.mediaDevices.getDisplayMedia &&\n    window &&\n    window.MediaRecorder) {\n    return navigator.mediaDevices\n  }\n  /* eslint-enable */\n\n  return null\n}\n\n/**\n * Screen capture\n */\nmodule.exports = class ScreenCapture extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.mediaDevices = getMediaDevices()\n    this.protocol = location.protocol.match(/https/i) ? 'https' : 'http'\n    this.id = this.opts.id || 'ScreenCapture'\n    this.title = this.opts.title || 'Screencast'\n    this.type = 'acquirer'\n    this.icon = ScreenRecIcon\n\n    this.defaultLocale = {\n      strings: {\n        startCapturing: 'Begin screen capturing',\n        stopCapturing: 'Stop screen capturing',\n        submitRecordedFile: 'Submit captured video',\n        streamActive: 'Stream active',\n        streamPassive: 'Stream passive',\n        micDisabled: 'Microphone access denied by user',\n        recording: 'Recording',\n      },\n    }\n\n    // set default options\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints\n    const defaultOptions = {\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#Properties_of_shared_screen_tracks\n      displayMediaConstraints: {\n        video: {\n          width: 1280,\n          height: 720,\n          frameRate: {\n            ideal: 3,\n            max: 5,\n          },\n          cursor: 'motion',\n          displaySurface: 'monitor',\n        },\n      },\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints/audio\n      userMediaConstraints: {\n        audio: true,\n      },\n      preferredVideoMimeType: 'video/webm',\n    }\n\n    // merge default options with the ones set by user\n    this.opts = { ...defaultOptions, ...opts }\n\n    // i18n\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale])\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.i18nArray = this.translator.translateArray.bind(this.translator)\n\n    // uppy plugin class related\n    this.install = this.install.bind(this)\n    this.setPluginState = this.setPluginState.bind(this)\n    this.render = this.render.bind(this)\n\n    // screen capturer related\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.startRecording = this.startRecording.bind(this)\n    this.stopRecording = this.stopRecording.bind(this)\n    this.submit = this.submit.bind(this)\n    this.streamInterrupted = this.streamInactivated.bind(this)\n\n    // initialize\n    this.captureActive = false\n    this.capturedMediaFile = null\n  }\n\n  install () {\n    // Return if browser doesn’t support getDisplayMedia and\n    if (!this.mediaDevices) {\n      this.uppy.log('Screen recorder access is not supported', 'error')\n      return null\n    }\n\n    this.setPluginState({\n      streamActive: false,\n      audioStreamActive: false,\n    })\n\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    if (this.videoStream) {\n      this.stop()\n    }\n\n    this.unmount()\n  }\n\n  start () {\n    if (!this.mediaDevices) {\n      return Promise.reject(new Error('Screen recorder access not supported'))\n    }\n\n    this.captureActive = true\n\n    this.selectAudioStreamSource()\n\n    this.selectVideoStreamSource()\n      .then(res => {\n        // something happened in start -> return\n        if (res === false) {\n          // Close the Dashboard panel if plugin is installed\n          // into Dashboard (could be other parent UI plugin)\n          if (this.parent && this.parent.hideAllPanels) {\n            this.parent.hideAllPanels()\n            this.captureActive = false\n          }\n        }\n      })\n  }\n\n  selectVideoStreamSource () {\n    // if active stream available, return it\n    if (this.videoStream) {\n      return new Promise(resolve => resolve(this.videoStream))\n    }\n\n    // ask user to select source to record and get mediastream from that\n    // eslint-disable-next-line compat/compat\n    return this.mediaDevices.getDisplayMedia(this.opts.displayMediaConstraints)\n      .then((videoStream) => {\n        this.videoStream = videoStream\n\n        // add event listener to stop recording if stream is interrupted\n        this.videoStream.addEventListener('inactive', (event) => {\n          this.streamInactivated()\n        })\n\n        this.setPluginState({\n          streamActive: true,\n        })\n\n        return videoStream\n      })\n      .catch((err) => {\n        this.setPluginState({\n          screenRecError: err,\n        })\n\n        this.userDenied = true\n\n        setTimeout(() => {\n          this.userDenied = false\n        }, 1000)\n\n        return false\n      })\n  }\n\n  selectAudioStreamSource () {\n    // if active stream available, return it\n    if (this.audioStream) {\n      return new Promise(resolve => resolve(this.audioStream))\n    }\n\n    // ask user to select source to record and get mediastream from that\n    // eslint-disable-next-line compat/compat\n    return this.mediaDevices.getUserMedia(this.opts.userMediaConstraints)\n      .then((audioStream) => {\n        this.audioStream = audioStream\n\n        this.setPluginState({\n          audioStreamActive: true,\n        })\n\n        return audioStream\n      })\n      .catch((err) => {\n        if (err.name === 'NotAllowedError') {\n          this.uppy.info(this.i18n('micDisabled'), 'error', 5000)\n        }\n\n        return false\n      })\n  }\n\n  startRecording () {\n    const options = {}\n    this.capturedMediaFile = null\n    this.recordingChunks = []\n    const preferredVideoMimeType = this.opts.preferredVideoMimeType\n\n    this.selectVideoStreamSource()\n      .then((videoStream) => {\n        // Attempt to use the passed preferredVideoMimeType (if any) during recording.\n        // If the browser doesn't support it, we'll fall back to the browser default instead\n        if (preferredVideoMimeType && MediaRecorder.isTypeSupported(preferredVideoMimeType) && getFileTypeExtension(preferredVideoMimeType)) {\n          options.mimeType = preferredVideoMimeType\n        }\n\n        // prepare tracks\n        const tracks = [videoStream.getVideoTracks()[0]]\n\n        // merge audio if exits\n        if (this.audioStream) {\n          tracks.push(this.audioStream.getAudioTracks()[0])\n        }\n\n        // create new stream from video and audio\n        // eslint-disable-next-line compat/compat\n        this.outputStream = new MediaStream(tracks)\n\n        // initialize mediarecorder\n        // eslint-disable-next-line compat/compat\n        this.recorder = new MediaRecorder(this.outputStream, options)\n\n        // push data to buffer when data available\n        this.recorder.addEventListener('dataavailable', (event) => {\n          this.recordingChunks.push(event.data)\n        })\n\n        // start recording\n        this.recorder.start()\n\n        // set plugin state to recording\n        this.setPluginState({\n          recording: true,\n        })\n      })\n      .catch((err) => {\n        this.uppy.log(err, 'error')\n      })\n  }\n\n  streamInactivated () {\n    // get screen recorder state\n    const { recordedVideo, recording } = { ...this.getPluginState() }\n\n    if (!recordedVideo && !recording) {\n      // Close the Dashboard panel if plugin is installed\n      // into Dashboard (could be other parent UI plugin)\n      if (this.parent && this.parent.hideAllPanels) {\n        this.parent.hideAllPanels()\n      }\n    } else if (recording) {\n      // stop recorder if it is active\n      this.uppy.log('Capture stream inactive — stop recording')\n      this.stopRecording()\n    }\n\n    this.videoStream = null\n    this.audioStream = null\n\n    this.setPluginState({\n      streamActive: false, audioStreamActive: false,\n    })\n  }\n\n  stopRecording () {\n    const stopped = new Promise((resolve, reject) => {\n      this.recorder.addEventListener('stop', () => {\n        resolve()\n      })\n\n      this.recorder.stop()\n    })\n\n    return stopped.then(() => {\n      // recording stopped\n      this.setPluginState({\n        recording: false,\n      })\n      // get video file after recorder stopped\n      return this.getVideo()\n    }).then((file) => {\n      // store media file\n      this.capturedMediaFile = file\n\n      // create object url for capture result preview\n      this.setPluginState({\n        // eslint-disable-next-line compat/compat\n        recordedVideo: URL.createObjectURL(file.data),\n      })\n    }).then(() => {\n      this.recordingChunks = null\n      this.recorder = null\n    }, (error) => {\n      this.recordingChunks = null\n      this.recorder = null\n      throw error\n    })\n  }\n\n  submit () {\n    try {\n      // add recorded file to uppy\n      if (this.capturedMediaFile) {\n        this.uppy.addFile(this.capturedMediaFile)\n      }\n    } catch (err) {\n      // Logging the error, exept restrictions, which is handled in Core\n      if (!err.isRestriction) {\n        this.uppy.log(err, 'error')\n      }\n    }\n  }\n\n  stop () {\n    // flush video stream\n    if (this.videoStream) {\n      this.videoStream.getVideoTracks().forEach((track) => {\n        track.stop()\n      })\n      this.videoStream.getAudioTracks().forEach((track) => {\n        track.stop()\n      })\n      this.videoStream = null\n    }\n\n    // flush audio stream\n    if (this.audioStream) {\n      this.audioStream.getAudioTracks().forEach((track) => {\n        track.stop()\n      })\n      this.audioStream.getVideoTracks().forEach((track) => {\n        track.stop()\n      })\n      this.audioStream = null\n    }\n\n    // flush output stream\n    if (this.outputStream) {\n      this.outputStream.getAudioTracks().forEach((track) => {\n        track.stop()\n      })\n      this.outputStream.getVideoTracks().forEach((track) => {\n        track.stop()\n      })\n      this.outputStream = null\n    }\n\n    // remove preview video\n    this.setPluginState({\n      recordedVideo: null,\n    })\n\n    this.captureActive = false\n  }\n\n  getVideo () {\n    const mimeType = this.recordingChunks[0].type\n    const fileExtension = getFileTypeExtension(mimeType)\n\n    if (!fileExtension) {\n      return Promise.reject(new Error(`Could not retrieve recording: Unsupported media type \"${mimeType}\"`))\n    }\n\n    const name = `screencap-${Date.now()}.${fileExtension}`\n    const blob = new Blob(this.recordingChunks, { type: mimeType })\n    const file = {\n      source: this.id,\n      name,\n      data: new Blob([blob], { type: mimeType }),\n      type: mimeType,\n    }\n\n    return Promise.resolve(file)\n  }\n\n  render (state) {\n    // get screen recorder state\n    const recorderState = this.getPluginState()\n\n    if (!recorderState.streamActive && !this.captureActive && !this.userDenied) {\n      this.start()\n    }\n\n    return (\n      <CaptureScreen\n        {...recorderState}\n        onStartRecording={this.startRecording}\n        onStopRecording={this.stopRecording}\n        onStop={this.stop}\n        onSubmit={this.submit}\n        i18n={this.i18n}\n        stream={this.videoStream}\n      />\n    )\n  }\n}\n"]}