{"version":3,"sources":["index.js"],"names":["require","Plugin","tus","Provider","RequestClient","Socket","emitSocketProgress","getSocketHost","settle","EventTracker","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","getFingerprint","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","storeFingerprintForResuming","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","module","exports","uppy","opts","type","id","title","defaultOptions","autoRetry","resume","useFastRemoteRetry","limit","withCredentials","requests","uploaders","Object","create","uploaderEvents","uploaderSockets","handleResetProgress","bind","handleUpload","files","getState","keys","forEach","fileID","tusState","setState","resetUploaderReferences","uploader","abort","setTimeout","remove","close","upload","file","current","total","Promise","resolve","reject","emit","uploadOptions","fingerprint","onBeforeRequest","req","xhr","getUnderlyingObject","err","log","originalRequest","queuedRequest","done","bytesUploaded","bytesTotal","onReceiveUploadUrl","url","uploadResp","uploadURL","name","copyProp","obj","srcProp","destProp","meta","metaFields","Array","isArray","item","Upload","data","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","run","isPaused","start","onFileRemove","targetFileID","onPause","onPauseAll","onCancelAll","onResumeAll","error","catch","uploadRemote","remote","serverToken","connectToServerSocket","Client","providerOptions","provider","client","post","body","protocol","size","res","setFileState","token","getFile","host","companionUrl","socket","target","autoOpen","send","onRetry","isOpen","onRetryAll","on","progressData","errData","message","Error","cause","open","currentFile","cb","filesToRetry","uploadFiles","promises","map","i","length","isRemote","fileIDs","filesToUpload","install","capabilities","resumableUploads","addUploader","retryAll","uninstall","removeUploader","off","VERSION"],"mappings":"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","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst tus = require('tus-js-client')\nconst { Provider, RequestClient, Socket } = require('@uppy/companion-client')\nconst emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress')\nconst getSocketHost = require('@uppy/utils/lib/getSocketHost')\nconst settle = require('@uppy/utils/lib/settle')\nconst EventTracker = require('@uppy/utils/lib/EventTracker')\nconst NetworkError = require('@uppy/utils/lib/NetworkError')\nconst isNetworkError = require('@uppy/utils/lib/isNetworkError')\nconst RateLimitedQueue = require('@uppy/utils/lib/RateLimitedQueue')\nconst hasProperty = require('@uppy/utils/lib/hasProperty')\nconst getFingerprint = require('./getFingerprint')\n\n/** @typedef {import('..').TusOptions} TusOptions */\n/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */\n/** @typedef {import('@uppy/core').Uppy} Uppy */\n/** @typedef {import('@uppy/core').UppyFile} UppyFile */\n/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n *\n * @type {RawTusOptions}\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [0, 1000, 3000, 5000],\n  parallelUploads: 1,\n  storeFingerprintForResuming: true,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n}\n\n/**\n * Tus resumable file uploader\n */\nmodule.exports = class Tus extends Plugin {\n  static VERSION = require('../package.json').version\n\n  /**\n   * @param {Uppy} uppy\n   * @param {TusOptions} opts\n   */\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      autoRetry: true,\n      resume: true,\n      useFastRemoteRetry: true,\n      limit: 0,\n      retryDelays: [0, 1000, 3000, 5000],\n      withCredentials: false,\n    }\n\n    // merge default options with the ones set by user\n    /** @type {import(\"..\").TusOptions} */\n    this.opts = { ...defaultOptions, ...opts }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = new RateLimitedQueue(this.opts.limit)\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n\n    this.handleResetProgress = this.handleResetProgress.bind(this)\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  handleResetProgress () {\n    const files = { ...this.uppy.getState().files }\n    Object.keys(files).forEach((fileID) => {\n      // Only clone the file object if it has a Tus `uploadUrl` attached.\n      if (files[fileID].tus && files[fileID].tus.uploadUrl) {\n        const tusState = { ...files[fileID].tus }\n        delete tusState.uploadUrl\n        files[fileID] = { ...files[fileID], tus: tusState }\n      }\n    })\n\n    this.uppy.setState({ files })\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * @param {string} fileID\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      const uploader = this.uploaders[fileID]\n      uploader.abort()\n      if (opts.abort) {\n        // to avoid 423 error from tus server, we wait\n        // to be sure the previous request has been aborted before terminating the upload\n        // @todo remove the timeout when this \"wait\" is handled in tus-js-client internally\n        setTimeout(() => uploader.abort(true), 1000)\n      }\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventTracker instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload--the tus.Upload instance\n   *   is aborted and discarded, the EventTracker instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventTracker instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventTracker instances need to be cleaned up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking up a spot in the queue.\n   *\n   * @param {UppyFile} file for use with upload\n   * @param {number} current file in a queue\n   * @param {number} total number of files in a queue\n   * @returns {Promise<void>}\n   */\n  upload (file, current, total) {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      this.uppy.emit('upload-started', file)\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      /** @type {RawTusOptions} */\n      const uploadOptions = {\n        ...tusDefaultOptions,\n        // TODO only put tus-specific options in?\n        ...opts,\n      }\n\n      delete uploadOptions.resume\n\n      // Make `resume: true` work like it did in tus-js-client v1.\n      // TODO: Remove in @uppy/tus v2\n      if (opts.resume) {\n        uploadOptions.storeFingerprintForResuming = true\n      }\n\n      // We override tus fingerprint to uppy’s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        if (typeof opts.onBeforeRequest === 'function') {\n          opts.onBeforeRequest(req)\n        }\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null\n        if (isNetworkError(xhr)) {\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-error', file, err)\n\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = () => {\n        const uploadResp = {\n          uploadURL: upload.url,\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-success', file, uploadResp)\n\n        if (upload.url) {\n          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`)\n        }\n\n        resolve(upload)\n      }\n\n      const copyProp = (obj, srcProp, destProp) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      /** @type {Record<string, string>} */\n      const meta = {}\n      const metaFields = Array.isArray(opts.metaFields)\n        ? opts.metaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n      metaFields.forEach((item) => {\n        meta[item] = file.meta[item]\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      const upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      // Make `resume: true` work like it did in tus-js-client v1.\n      // TODO: Remove in @uppy/tus v2.\n      if (opts.resume) {\n        upload.findPreviousUploads().then((previousUploads) => {\n          const previousUpload = previousUploads[0]\n          if (previousUpload) {\n            this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`)\n            upload.resumeFromPreviousUpload(previousUpload)\n          }\n        })\n      }\n\n      let queuedRequest = this.requests.run(() => {\n        if (!file.isPaused) {\n          // Ensure this gets scheduled to run _after_ `findPreviousUploads()` returns.\n          // TODO: Remove in @uppy/tus v2.\n          Promise.resolve().then(() => {\n            upload.start()\n          })\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      })\n\n      this.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            upload.start()\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      this.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(() => {\n          upload.start()\n          return () => {}\n        })\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  /**\n   * @param {UppyFile} file for use with upload\n   * @param {number} current file in a queue\n   * @param {number} total number of files in a queue\n   * @returns {Promise<void>}\n   */\n  uploadRemote (file, current, total) {\n    this.resetUploaderReferences(file.id)\n\n    const opts = { ...this.opts }\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    this.uppy.emit('upload-started', file)\n    this.uppy.log(file.remote.url)\n\n    if (file.serverToken) {\n      return this.connectToServerSocket(file)\n    }\n\n    return new Promise((resolve, reject) => {\n      const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n      const client = new Client(this.uppy, file.remote.providerOptions)\n\n      // !! cancellation is NOT supported at this stage yet\n      client.post(file.remote.url, {\n        ...file.remote.body,\n        endpoint: opts.endpoint,\n        uploadUrl: opts.uploadUrl,\n        protocol: 'tus',\n        size: file.data.size,\n        headers: opts.headers,\n        metadata: file.meta,\n      }).then((res) => {\n        this.uppy.setFileState(file.id, { serverToken: res.token })\n        file = this.uppy.getFile(file.id)\n        return this.connectToServerSocket(file)\n      }).then(() => {\n        resolve()\n      }).catch((err) => {\n        this.uppy.emit('upload-error', file, err)\n        reject(err)\n      })\n    })\n  }\n\n  /**\n   * See the comment on the upload() method.\n   *\n   * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().\n   *\n   * @param {UppyFile} file\n   */\n  connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      this.onFileRemove(file.id, () => {\n        queuedRequest.abort()\n        // still send pause event in case we are dealing with older version of companion\n        // @todo don't send pause event in the next major release.\n        socket.send('pause', {})\n        socket.send('cancel', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          socket.send('pause', {})\n        } else {\n          // Resuming an upload should be queued, else you could pause and then resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.send('resume', {})\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n      })\n\n      this.onCancelAll(file.id, () => {\n        queuedRequest.abort()\n        // still send pause event in case we are dealing with older version of companion\n        // @todo don't send pause event in the next major release.\n        socket.send('pause', {})\n        socket.send('cancel', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.send('resume', {})\n          return () => {}\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        // See the comment in the onRetry() call\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        const { message } = errData.error\n        const error = Object.assign(new Error(message), { cause: errData.error })\n\n        // If the remote retry optimisation should not be used,\n        // close the socket—this will tell companion to clear state and delete the file.\n        if (!this.opts.useFastRemoteRetry) {\n          this.resetUploaderReferences(file.id)\n          // Remove the serverToken so that a new one will be created for the retry.\n          this.uppy.setFileState(file.id, {\n            serverToken: null,\n          })\n        } else {\n          socket.close()\n        }\n\n        this.uppy.emit('upload-error', file, error)\n        queuedRequest.done()\n        reject(error)\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        resolve()\n      })\n\n      let queuedRequest = this.requests.run(() => {\n        socket.open()\n        if (file.isPaused) {\n          socket.send('pause', {})\n        }\n\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      })\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   *\n   * @param {UppyFile} file\n   * @param {string} uploadURL\n   */\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(string): void} cb\n   */\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(boolean): void} cb\n   */\n  onPause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        // const isPaused = this.uppy.pauseResume(fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', (filesToRetry) => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onCancelAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('cancel-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {(UppyFile | FailedUppyFile)[]} files\n   */\n  uploadFiles (files) {\n    const promises = files.map((file, i) => {\n      const current = i + 1\n      const total = files.length\n\n      if ('error' in file && file.error) {\n        return Promise.reject(new Error(file.error))\n      } if (file.isRemote) {\n        return this.uploadRemote(file, current, total)\n      }\n      return this.upload(file, current, total)\n    })\n\n    return settle(promises)\n  }\n\n  /**\n   * @param {string[]} fileIDs\n   */\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return Promise.resolve()\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning'\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = fileIDs.map((fileID) => this.uppy.getFile(fileID))\n\n    return this.uploadFiles(filesToUpload)\n      .then(() => null)\n  }\n\n  install () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: true },\n    })\n    this.uppy.addUploader(this.handleUpload)\n\n    this.uppy.on('reset-progress', this.handleResetProgress)\n\n    if (this.opts.autoRetry) {\n      this.uppy.on('back-online', this.uppy.retryAll)\n    }\n  }\n\n  uninstall () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: false },\n    })\n    this.uppy.removeUploader(this.handleUpload)\n\n    if (this.opts.autoRetry) {\n      this.uppy.off('back-online', this.uppy.retryAll)\n    }\n  }\n}\n"]}