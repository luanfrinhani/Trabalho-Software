{"version":3,"sources":["index.js"],"names":["require","Plugin","h","module","exports","uppy","opts","id","title","type","defaultOptions","target","replaceTargetContent","fixed","hideAfterFinish","render","bind","state","progress","totalProgress","isHidden","position","width","install","mount","uninstall","unmount","VERSION"],"mappings":";;;;;;;;;;eAAmBA,OAAO,CAAC,YAAD,C;IAAlBC,M,YAAAA,M;;gBACMD,OAAO,CAAC,QAAD,C;IAAbE,C,aAAAA,C;AAER;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP;AAAA;;AAGE,uBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,+BAAMD,IAAN,EAAYC,IAAZ;AACA,UAAKC,EAAL,GAAU,MAAKD,IAAL,CAAUC,EAAV,IAAgB,aAA1B;AACA,UAAKC,KAAL,GAAa,cAAb;AACA,UAAKC,IAAL,GAAY,mBAAZ,CAJuB,CAMvB;;AACA,QAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,oBAAoB,EAAE,KAFD;AAGrBC,MAAAA,KAAK,EAAE,KAHc;AAIrBC,MAAAA,eAAe,EAAE;AAJI,KAAvB,CAPuB,CAcvB;;AACA,UAAKR,IAAL,gBAAiBI,cAAjB,EAAoCJ,IAApC;AAEA,UAAKS,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AAjBuB;AAkBxB;;AArBH;;AAAA,SAuBED,MAvBF,GAuBE,gBAAQE,KAAR,EAAe;AACb,QAAMC,QAAQ,GAAGD,KAAK,CAACE,aAAN,IAAuB,CAAxC,CADa,CAEb;;AACA,QAAMC,QAAQ,GAAG,CAACF,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,GAAhC,KAAwC,KAAKZ,IAAL,CAAUQ,eAAnE;AACA,WACE;AACE,MAAA,SAAS,EAAC,uBADZ;AAEE,MAAA,KAAK,EAAE;AAAEO,QAAAA,QAAQ,EAAE,KAAKf,IAAL,CAAUO,KAAV,GAAkB,OAAlB,GAA4B;AAAxC,OAFT;AAGE,qBAAaO;AAHf,OAKE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAKJ,QAAL;AAAP;AAA/C,MALF,EAME;AAAK,MAAA,SAAS,EAAC;AAAf,OAA8CA,QAA9C,CANF,CADF;AAUD,GArCH;;AAAA,SAuCEK,OAvCF,GAuCE,mBAAW;AACT,QAAMZ,MAAM,GAAG,KAAKL,IAAL,CAAUK,MAAzB;;AACA,QAAIA,MAAJ,EAAY;AACV,WAAKa,KAAL,CAAWb,MAAX,EAAmB,IAAnB;AACD;AACF,GA5CH;;AAAA,SA8CEc,SA9CF,GA8CE,qBAAa;AACX,SAAKC,OAAL;AACD,GAhDH;;AAAA;AAAA,EAA2CzB,MAA3C,UACS0B,OADT","sourcesContent":["const { Plugin } = require('@uppy/core')\nconst { h } = require('preact')\n\n/**\n * Progress bar\n *\n */\nmodule.exports = class ProgressBar extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'ProgressBar'\n    this.title = 'Progress Bar'\n    this.type = 'progressindicator'\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      replaceTargetContent: false,\n      fixed: false,\n      hideAfterFinish: true,\n    }\n\n    // merge default options with the ones set by user\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.render = this.render.bind(this)\n  }\n\n  render (state) {\n    const progress = state.totalProgress || 0\n    // before starting and after finish should be hidden if specified in the options\n    const isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish\n    return (\n      <div\n        className=\"uppy uppy-ProgressBar\"\n        style={{ position: this.opts.fixed ? 'fixed' : 'initial' }}\n        aria-hidden={isHidden}\n      >\n        <div className=\"uppy-ProgressBar-inner\" style={{ width: `${progress}%` }} />\n        <div className=\"uppy-ProgressBar-percentage\">{progress}</div>\n      </div>\n    )\n  }\n\n  install () {\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}