{"version":3,"sources":["index.js"],"names":["URL_","URL","require","Plugin","Translator","RateLimitedQueue","settle","hasProperty","RequestClient","qsStringify","MiniXHRUpload","isXml","resolveUrl","origin","link","toString","getXmlValue","source","tagName","start","indexOf","end","slice","length","assertServerError","res","error","Error","message","warnedSuccessActionStatus","module","exports","uppy","opts","type","id","title","defaultLocale","strings","timedOut","defaultOptions","timeout","limit","metaFields","getUploadParameters","bind","i18nInit","client","handleUpload","requests","setOptions","newOpts","translator","locale","i18n","translate","setPluginState","file","companionUrl","filename","meta","name","metadata","forEach","key","query","get","then","validateParameters","params","valid","url","fields","err","TypeError","JSON","stringify","console","methodIsValid","method","test","fileIDs","paramsPromises","Object","create","onremove","abort","on","getFile","emit","wrapPromiseFunction","numberOfFiles","map","index","headers","xhrOpts","formData","toLowerCase","endpoint","keys","setFileState","xhrUpload","_uploader","uploadFile","catch","settled","off","install","addUploader","defaultGetResponseData","content","xhr","toUpperCase","log","location","responseURL","replace","bucket","etag","defaultGetResponseError","xhrOptions","fieldName","responseUrlFieldName","__queue","responseType","getResponseData","getResponseError","uninstall","removeUploader","VERSION"],"mappings":"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","sourcesContent":["/**\n * This plugin is currently a A Big Hackâ„¢! The core reason for that is how this plugin\n * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,\n * including preprocessing, uploading, and postprocessing steps. This plugin initially\n * was designed to do its work in a preprocessing step, and let XHRUpload deal with the\n * actual file upload as an uploading step. However, Uppy runs steps on all files at once,\n * sequentially: first, all files go through a preprocessing step, then, once they are all\n * done, they go through the uploading step.\n *\n * For S3, this causes severely broken behaviour when users upload many files. The\n * preprocessing step will request S3 upload URLs that are valid for a short time only,\n * but it has to do this for _all_ files, which can take a long time if there are hundreds\n * or even thousands of files. By the time the uploader step starts, the first URLs may\n * already have expired. If not, the uploading might take such a long time that later URLs\n * will expire before some files can be uploaded.\n *\n * The long-term solution to this problem is to change the upload pipeline so that files\n * can be sent to the next step individually. That requires a breakig change, so it is\n * planned for Uppy v2.\n *\n * In the mean time, this plugin is stuck with a hackier approach: the necessary parts\n * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload\n * class, and this plugin calls into it immediately once it receives an upload URL.\n * This isn't as nicely modular as we'd like and requires us to maintain two copies of\n * the XHRUpload code, but at least it's not horrifically broken :)\n */\n\n// If global `URL` constructor is available, use it\nconst URL_ = typeof URL === 'function' ? URL : require('url-parse')\nconst { Plugin } = require('@uppy/core')\nconst Translator = require('@uppy/utils/lib/Translator')\nconst RateLimitedQueue = require('@uppy/utils/lib/RateLimitedQueue')\nconst settle = require('@uppy/utils/lib/settle')\nconst hasProperty = require('@uppy/utils/lib/hasProperty')\nconst { RequestClient } = require('@uppy/companion-client')\nconst qsStringify = require('qs-stringify')\nconst MiniXHRUpload = require('./MiniXHRUpload')\nconst isXml = require('./isXml')\n\nfunction resolveUrl (origin, link) {\n  return origin\n    ? new URL_(link, origin).toString()\n    : new URL_(link).toString()\n}\n\n/**\n * Get the contents of a named tag in an XML source string.\n *\n * @param {string} source - The XML source string.\n * @param {string} tagName - The name of the tag.\n * @returns {string} The contents of the tag, or the empty string if the tag does not exist.\n */\nfunction getXmlValue (source, tagName) {\n  const start = source.indexOf(`<${tagName}>`)\n  const end = source.indexOf(`</${tagName}>`, start)\n  return start !== -1 && end !== -1\n    ? source.slice(start + tagName.length + 2, end)\n    : ''\n}\n\nfunction assertServerError (res) {\n  if (res && res.error) {\n    const error = new Error(res.message)\n    Object.assign(error, res.error)\n    throw error\n  }\n  return res\n}\n\n// warning deduplication flag: see `getResponseData()` XHRUpload option definition\nlet warnedSuccessActionStatus = false\n\nmodule.exports = class AwsS3 extends Plugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3'\n    this.title = 'AWS S3'\n\n    this.defaultLocale = {\n      strings: {\n        timedOut: 'Upload stalled for %{seconds} seconds, aborting.',\n      },\n    }\n\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      metaFields: [], // have to opt in\n      getUploadParameters: this.getUploadParameters.bind(this),\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.client = new RequestClient(uppy, opts)\n    this.handleUpload = this.handleUpload.bind(this)\n    this.requests = new RateLimitedQueue(this.opts.limit)\n  }\n\n  setOptions (newOpts) {\n    super.setOptions(newOpts)\n    this.i18nInit()\n  }\n\n  i18nInit () {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale])\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.setPluginState() // so that UI re-renders and we see the updated locale\n  }\n\n  getUploadParameters (file) {\n    if (!this.opts.companionUrl) {\n      throw new Error('Expected a `companionUrl` option containing a Companion address.')\n    }\n\n    const filename = file.meta.name\n    const type = file.meta.type\n    const metadata = {}\n    this.opts.metaFields.forEach((key) => {\n      if (file.meta[key] != null) {\n        metadata[key] = file.meta[key].toString()\n      }\n    })\n\n    const query = qsStringify({ filename, type, metadata })\n    return this.client.get(`s3/params?${query}`)\n      .then(assertServerError)\n  }\n\n  validateParameters (file, params) {\n    const valid = typeof params === 'object' && params\n      && typeof params.url === 'string'\n      && (typeof params.fields === 'object' || params.fields == null)\n\n    if (!valid) {\n      const err = new TypeError(`AwsS3: got incorrect result from 'getUploadParameters()' for file '${file.name}', expected an object '{ url, method, fields, headers }' but got '${JSON.stringify(params)}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n      console.error(err)\n      throw err\n    }\n\n    const methodIsValid = params.method == null || /^(put|post)$/i.test(params.method)\n\n    if (!methodIsValid) {\n      const err = new TypeError(`AwsS3: got incorrect method from 'getUploadParameters()' for file '${file.name}', expected  'put' or 'post' but got '${params.method}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n      console.error(err)\n      throw err\n    }\n  }\n\n  handleUpload (fileIDs) {\n    /**\n     * keep track of `getUploadParameters()` responses\n     * so we can cancel the calls individually using just a file ID\n     *\n     * @type {object.<string, Promise>}\n     */\n    const paramsPromises = Object.create(null)\n\n    function onremove (file) {\n      const { id } = file\n      if (hasProperty(paramsPromises, id)) {\n        paramsPromises[id].abort()\n      }\n    }\n    this.uppy.on('file-removed', onremove)\n\n    fileIDs.forEach((id) => {\n      const file = this.uppy.getFile(id)\n      this.uppy.emit('upload-started', file)\n    })\n\n    const getUploadParameters = this.requests.wrapPromiseFunction((file) => {\n      return this.opts.getUploadParameters(file)\n    })\n\n    const numberOfFiles = fileIDs.length\n\n    return settle(fileIDs.map((id, index) => {\n      paramsPromises[id] = getUploadParameters(this.uppy.getFile(id))\n      return paramsPromises[id].then((params) => {\n        delete paramsPromises[id]\n\n        const file = this.uppy.getFile(id)\n        this.validateParameters(file, params)\n\n        const {\n          method = 'post',\n          url,\n          fields,\n          headers,\n        } = params\n        const xhrOpts = {\n          method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: fields ? Object.keys(fields) : [],\n        }\n\n        if (headers) {\n          xhrOpts.headers = headers\n        }\n\n        this.uppy.setFileState(file.id, {\n          meta: { ...file.meta, ...fields },\n          xhrUpload: xhrOpts,\n        })\n\n        return this._uploader.uploadFile(file.id, index, numberOfFiles)\n      }).catch((error) => {\n        delete paramsPromises[id]\n\n        const file = this.uppy.getFile(id)\n        this.uppy.emit('upload-error', file, error)\n      })\n    })).then((settled) => {\n      // cleanup.\n      this.uppy.off('file-removed', onremove)\n      return settled\n    })\n  }\n\n  install () {\n    const uppy = this.uppy\n    this.uppy.addUploader(this.handleUpload)\n\n    // Get the response data from a successful XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n    function defaultGetResponseData (content, xhr) {\n      const opts = this\n\n      // If no response, we've hopefully done a PUT request to the file\n      // in the bucket on its full URL.\n      if (!isXml(content, xhr)) {\n        if (opts.method.toUpperCase() === 'POST') {\n          if (!warnedSuccessActionStatus) {\n            uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning')\n            warnedSuccessActionStatus = true\n          }\n          // The responseURL won't contain the object key. Give up.\n          return { location: null }\n        }\n\n        // responseURL is not available in older browsers.\n        if (!xhr.responseURL) {\n          return { location: null }\n        }\n\n        // Trim the query string because it's going to be a bunch of presign\n        // parameters for a PUT requestâ€”doing a GET request with those will\n        // always result in an error\n        return { location: xhr.responseURL.replace(/\\?.*$/, '') }\n      }\n\n      return {\n        // Some S3 alternatives do not reply with an absolute URL.\n        // Eg DigitalOcean Spaces uses /$bucketName/xyz\n        location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),\n        bucket: getXmlValue(content, 'Bucket'),\n        key: getXmlValue(content, 'Key'),\n        etag: getXmlValue(content, 'ETag'),\n      }\n    }\n\n    // Get the error data from a failed XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n    function defaultGetResponseError (content, xhr) {\n      // If no response, we don't have a specific error message, use the default.\n      if (!isXml(content, xhr)) {\n        return\n      }\n      const error = getXmlValue(content, 'Message')\n      return new Error(error)\n    }\n\n    const xhrOptions = {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      // Share the rate limiting queue with XHRUpload.\n      __queue: this.requests,\n      responseType: 'text',\n      getResponseData: this.opts.getResponseData || defaultGetResponseData,\n      getResponseError: defaultGetResponseError,\n    }\n\n    // Only for MiniXHRUpload, remove once we can depend on XHRUpload directly again\n    xhrOptions.i18n = this.i18n\n\n    // Revert to `this.uppy.use(XHRUpload)` once the big comment block at the top of\n    // this file is solved\n    this._uploader = new MiniXHRUpload(this.uppy, xhrOptions)\n  }\n\n  uninstall () {\n    this.uppy.removeUploader(this.handleUpload)\n  }\n}\n"]}