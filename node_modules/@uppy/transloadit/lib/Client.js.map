{"version":3,"sources":["Client.js"],"names":["fetchWithNetworkError","require","URL","module","exports","opts","_reportError","bind","_headers","client","createAssembly","params","fields","signature","expectedFiles","data","FormData","append","JSON","stringify","Object","keys","forEach","key","url","service","href","method","headers","body","then","response","json","assembly","error","Error","details","message","assembly_id","catch","err","type","reserveFile","file","size","encodeURIComponent","assembly_ssl_url","addFile","uploadURL","Promise","reject","uploadUrl","filename","name","fieldname","qs","cancelAssembly","getAssemblyStatus","submitError","endpoint","instance","agent","navigator","userAgent","errorReporting","_"],"mappings":"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","sourcesContent":["const fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError')\nconst URL = require('url-parse')\n\n/**\n * A Barebones HTTP API client for Transloadit.\n */\nmodule.exports = class Client {\n  constructor (opts = {}) {\n    this.opts = opts\n\n    this._reportError = this._reportError.bind(this)\n\n    this._headers = {\n      'Transloadit-Client': this.opts.client,\n    }\n  }\n\n  /**\n   * Create a new assembly.\n   *\n   * @param {object} options\n   * @param {string|object} options.params\n   * @param {object} options.fields\n   * @param {string} options.signature\n   * @param {number} options.expectedFiles\n   */\n  createAssembly ({\n    params,\n    fields,\n    signature,\n    expectedFiles,\n  }) {\n    const data = new FormData()\n    data.append('params', typeof params === 'string'\n      ? params\n      : JSON.stringify(params))\n    if (signature) {\n      data.append('signature', signature)\n    }\n\n    Object.keys(fields).forEach((key) => {\n      data.append(key, fields[key])\n    })\n    data.append('num_expected_upload_files', expectedFiles)\n\n    const url = new URL('/assemblies', `${this.opts.service}`).href\n    return fetchWithNetworkError(url, {\n      method: 'post',\n      headers: this._headers,\n      body: data,\n    })\n      .then((response) => response.json()).then((assembly) => {\n        if (assembly.error) {\n          const error = new Error(assembly.error)\n          error.details = assembly.message\n          error.assembly = assembly\n          if (assembly.assembly_id) {\n            error.details += ' ' + `Assembly ID: ${assembly.assembly_id}`\n          }\n          throw error\n        }\n\n        return assembly\n      })\n      .catch((err) => this._reportError(err, { url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Reserve resources for a file in an Assembly. Then addFile can be used later.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */\n  reserveFile (assembly, file) {\n    const size = encodeURIComponent(file.size)\n    const url = `${assembly.assembly_ssl_url}/reserve_file?size=${size}`\n    return fetchWithNetworkError(url, { method: 'post', headers: this._headers })\n      .then((response) => response.json())\n      .catch((err) => this._reportError(err, { assembly, file, url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Import a remote file to an Assembly.\n   *\n   * @param {object} assembly\n   * @param {UppyFile} file\n   */\n  addFile (assembly, file) {\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'))\n    }\n    const size = encodeURIComponent(file.size)\n    const uploadUrl = encodeURIComponent(file.uploadURL)\n    const filename = encodeURIComponent(file.name)\n    const fieldname = 'file'\n\n    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${uploadUrl}`\n    const url = `${assembly.assembly_ssl_url}/add_file?${qs}`\n    return fetchWithNetworkError(url, { method: 'post', headers: this._headers })\n      .then((response) => response.json())\n      .catch((err) => this._reportError(err, { assembly, file, url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Cancel a running Assembly.\n   *\n   * @param {object} assembly\n   */\n  cancelAssembly (assembly) {\n    const url = assembly.assembly_ssl_url\n    return fetchWithNetworkError(url, { method: 'delete', headers: this._headers })\n      .then((response) => response.json())\n      .catch((err) => this._reportError(err, { url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Get the current status for an assembly.\n   *\n   * @param {string} url The status endpoint of the assembly.\n   */\n  getAssemblyStatus (url) {\n    return fetchWithNetworkError(url, { headers: this._headers })\n      .then((response) => response.json())\n      .catch((err) => this._reportError(err, { url, type: 'STATUS_ERROR' }))\n  }\n\n  submitError (err, { endpoint, instance, assembly }) {\n    const message = err.details\n      ? `${err.message} (${err.details})`\n      : err.message\n\n    return fetchWithNetworkError('https://transloaditstatus.com/client_error', {\n      method: 'post',\n      body: JSON.stringify({\n        endpoint,\n        instance,\n        assembly_id: assembly,\n        agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        client: this.opts.client,\n        error: message,\n      }),\n    })\n      .then((response) => response.json())\n  }\n\n  _reportError (err, params) {\n    if (this.opts.errorReporting === false) {\n      throw err\n    }\n\n    const opts = {\n      type: params.type,\n    }\n    if (params.assembly) {\n      opts.assembly = params.assembly.assembly_id\n      opts.instance = params.assembly.instance\n    }\n    if (params.url) {\n      opts.endpoint = params.url\n    }\n\n    this.submitError(err, opts).catch((_) => {\n      // not much we can do then is there\n    })\n\n    throw err\n  }\n}\n"]}