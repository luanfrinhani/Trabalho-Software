{"version":3,"sources":["../src/vnode.js","../src/h.js","../src/util.js","../src/clone-element.js","../src/constants.js","../src/render-queue.js","../src/vdom/index.js","../src/dom/index.js","../src/vdom/diff.js","../src/vdom/component-recycler.js","../src/vdom/component.js","../src/options.js","../src/component.js","../src/render.js","../src/preact.js"],"names":["VNode","nodeName","attributes","lastSimple","child","simple","i","children","EMPTY_CHILDREN","arguments","length","stack","push","pop","undefined","String","p","key","options","vnode","extend","obj","props","cloneElement","h","slice","call","ATTR_KEY","component","debounceRendering","defer","rerender","items","_dirty","hydrating","node","_componentConstructor","normalizedNodeName","toLowerCase","defaultProps","document","createElementNS","createElement","createNode","isSvg","setAccessor","name","old","value","className","cssText","style","IS_NON_DIMENSIONAL","test","__html","useCapture","replace","substring","addEventListener","eventProxy","removeEventListener","innerHTML","_listeners","setProperty","removeAttribute","ns","setAttribute","e","this","type","event","diffLevel","c","mounts","isSvgMode","afterMount","diff","dom","context","mountAll","parent","componentRoot","ret","idiff","ownerSVGElement","out","prevSvgMode","parentNode","_component","nodeValue","splitText","recollectNodeTree","vnodeName","buildComponentFromVNode","replaceChild","appendChild","vchildren","a","fc","innerDiffNode","isHydrating","j","originalChildren","keyed","keyedLen","childrenLen","vlen","_child","f","__key","vchild","trim","min","nextSibling","removeNode","insertBefore","unmountOnly","removeChildren","next","previousSibling","attrs","collectComponent","components","Ctor","inst","constructor","render","Component","createComponent","list","nextBase","splice","state","setComponentProps","opts","_disable","__ref","ref","prevContext","componentWillReceiveProps","base","renderComponent","enqueueRender","prevProps","isChild","previousProps","previousState","isUpdate","initialBase","initialChildComponent","previousContext","rendered","shouldComponentUpdate","skip","cbase","componentWillUpdate","prevState","getChildContext","childComponent","childProps","getNodeProps","toUnmount","baseParent","SYNC_RENDER","componentRef","t","unshift","_parentComponent","afterUpdate","_renderCallbacks","flushMounts","oldDom","originalComponent","isDirectOwner","isOwner","unmountComponent","inner","componentWillUnmount","Promise","resolve","then","bind","setTimeout","ASYNC_RENDER","forceUpdate","callback","module","exports","preact","self"],"mappings":"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","file":"preact.js","sourcesContent":["/** Virtual DOM Node */\nexport function VNode() {}\n","import { VNode } from './vnode';\nimport options from './options';\n\n\nconst stack = [];\n\nconst EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation\n * of the structure of a DOM tree. This structure can be realized by recursively comparing it against\n * the current _actual_ DOM structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string} nodeName\tAn element name. Ex: `div`, `a`, `span`, etc.\n * @param {Object} attributes\tAny attributes/props to set on the created element.\n * @param rest\t\t\tAdditional arguments are taken to be children to append. Can be infinitely nested Arrays.\n *\n * @public\n */\nexport function h(nodeName, attributes) {\n\tlet children=EMPTY_CHILDREN, lastSimple, child, simple, i;\n\tfor (i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children!=null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop!==undefined) {\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\n\t\t}\n\t\telse {\n\t\t\tif (typeof child==='boolean') child = null;\n\n\t\t\tif ((simple = typeof nodeName!=='function')) {\n\t\t\t\tif (child==null) child = '';\n\t\t\t\telse if (typeof child==='number') child = String(child);\n\t\t\t\telse if (typeof child!=='string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length-1] += child;\n\t\t\t}\n\t\t\telse if (children===EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tlet p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes==null ? undefined : attributes;\n\tp.key = attributes==null ? undefined : attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode!==undefined) options.vnode(p);\n\n\treturn p;\n}\n","/**\n *  Copy all properties from `props` onto `obj`.\n *  @param {Object} obj\t\tObject onto which properties should be copied.\n *  @param {Object} props\tObject from which to copy properties.\n *  @returns obj\n *  @private\n */\nexport function extend(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n *\n * @param {Function} callback\n */\nexport const defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n","import { extend } from './util';\nimport { h } from './h';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {VNode} vnode\t\tThe virtual DOM element to clone\n * @param {Object} props\tAttributes/props to add when cloning\n * @param {VNode} rest\t\tAny additional arguments will be used as replacement children.\n */\nexport function cloneElement(vnode, props) {\n\treturn h(\n\t\tvnode.nodeName,\n\t\textend(extend({}, vnode.attributes), props),\n\t\targuments.length>2 ? [].slice.call(arguments, 2) : vnode.children\n\t);\n}\n","// render modes\n\nexport const NO_RENDER = 0;\nexport const SYNC_RENDER = 1;\nexport const FORCE_RENDER = 2;\nexport const ASYNC_RENDER = 3;\n\n\nexport const ATTR_KEY = '__preactattr_';\n\n// DOM properties that should NOT have \"px\" added when numeric\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n","import options from './options';\nimport { defer } from './util';\nimport { renderComponent } from './vdom/component';\n\n/** Managed queue of dirty components to be re-rendered */\n\nlet items = [];\n\nexport function enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component)==1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\nexport function rerender() {\n\tlet p, list = items;\n\titems = [];\n\twhile ( (p = list.pop()) ) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n","import { extend } from '../util';\n\n\n/**\n * Check if two nodes are equivalent.\n *\n * @param {Node} node\t\t\tDOM Node to compare\n * @param {VNode} vnode\t\t\tVirtual DOM node to compare\n * @param {boolean} [hydrating=false]\tIf true, ignores component constructors when comparing.\n * @private\n */\nexport function isSameNodeType(node, vnode, hydrating) {\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\t\treturn node.splitText!==undefined;\n\t}\n\tif (typeof vnode.nodeName==='string') {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t}\n\treturn hydrating || node._componentConstructor===vnode.nodeName;\n}\n\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n *\n * @param {Element} node\tA DOM Element to inspect the name of.\n * @param {String} nodeName\tUnnormalized name to compare against.\n */\nexport function isNamedNode(node, nodeName) {\n\treturn node.normalizedNodeName===nodeName || node.nodeName.toLowerCase()===nodeName.toLowerCase();\n}\n\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n *\n * @param {VNode} vnode\n * @returns {Object} props\n */\nexport function getNodeProps(vnode) {\n\tlet props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps!==undefined) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\nexport function createNode(nodeName, isSvg) {\n\tlet node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n\n/** Remove a child node from its parent if attached.\n *\t@param {Element} node\t\tThe node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nexport function setAccessor(node, name, old, value, isSvg) {\n\tif (name==='className') name = 'class';\n\n\n\tif (name==='key') {\n\t\t// ignore\n\t}\n\telse if (name==='ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t}\n\telse if (name==='class' && !isSvg) {\n\t\tnode.className = value || '';\n\t}\n\telse if (name==='style') {\n\t\tif (!value || typeof value==='string' || typeof old==='string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value==='object') {\n\t\t\tif (typeof old!=='string') {\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\n\t\t\t}\n\t\t\tfor (let i in value) {\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (value[i]+'px') : value[i];\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t}\n\telse if (name[0]=='o' && name[1]=='n') {\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\telse {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t}\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\n\t\tsetProperty(node, name, value==null ? '' : value);\n\t\tif (value==null || value===false) node.removeAttribute(name);\n\t}\n\telse {\n\t\tlet ns = isSvg && (name !== (name = name.replace(/^xlink:?/, '')));\n\t\tif (value==null || value===false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\n\t\t\telse node.removeAttribute(name);\n\t\t}\n\t\telse if (typeof value!=='function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\n\t\t\telse node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n\ttry {\n\t\tnode[name] = value;\n\t} catch (e) { }\n}\n\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n","import { ATTR_KEY } from '../constants';\nimport { isSameNodeType, isNamedNode } from './index';\nimport { buildComponentFromVNode } from './component';\nimport { createNode, setAccessor } from '../dom/index';\nimport { unmountComponent } from './component';\nimport options from '../options';\nimport { removeNode } from '../dom/index';\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nexport const mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nexport let diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nlet isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nlet hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nexport function flushMounts() {\n\tlet c;\n\twhile ((c=mounts.pop())) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent!=null && parent.ownerSVGElement!==undefined;\n\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom!=null && !(ATTR_KEY in dom);\n\t}\n\n\tlet ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode!==parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (!--diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tlet out = dom,\n\t\tprevSvgMode = isSvgMode;\n\n\t// empty values (null, undefined, booleans) render as empty Text nodes\n\tif (vnode==null || typeof vnode==='boolean') vnode = '';\n\n\n\t// Fast case: Strings & Numbers create/update Text nodes.\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\n\t\t// update if it's already a Text node:\n\t\tif (dom && dom.splitText!==undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n\t\t\tif (dom.nodeValue!=vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout[ATTR_KEY] = true;\n\n\t\treturn out;\n\t}\n\n\n\t// If the VNode represents a Component, perform a component diff:\n\tlet vnodeName = vnode.nodeName;\n\tif (typeof vnodeName==='function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnodeName==='svg' ? true : vnodeName==='foreignObject' ? false : isSvgMode;\n\n\n\t// If there's no existing element or it's the wrong type, create a new one:\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\n\n\t\t\t// if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\n\tlet fc = out.firstChild,\n\t\tprops = out[ATTR_KEY],\n\t\tvchildren = vnode.children;\n\n\tif (props==null) {\n\t\tprops = out[ATTR_KEY] = {};\n\t\tfor (let a=out.attributes, i=a.length; i--; ) props[a[i].name] = a[i].value;\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc!=null && fc.splitText!==undefined && fc.nextSibling==null) {\n\t\tif (fc.nodeValue!=vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc!=null) {\n\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML!=null);\n\t}\n\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n\tlet originalChildren = dom.childNodes,\n\t\tchildren = [],\n\t\tkeyed = {},\n\t\tkeyedLen = 0,\n\t\tmin = 0,\n\t\tlen = originalChildren.length,\n\t\tchildrenLen = 0,\n\t\tvlen = vchildren ? vchildren.length : 0,\n\t\tj, c, f, vchild, child;\n\n\t// Build up a map of keyed children and an Array of unkeyed children:\n\tif (len!==0) {\n\t\tfor (let i=0; i<len; i++) {\n\t\t\tlet child = originalChildren[i],\n\t\t\t\tprops = child[ATTR_KEY],\n\t\t\t\tkey = vlen && props ? child._component ? child._component.__key : props.key : null;\n\t\t\tif (key!=null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = child;\n\t\t\t}\n\t\t\telse if (props || (child.splitText!==undefined ? (isHydrating ? child.nodeValue.trim() : true) : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen!==0) {\n\t\tfor (let i=0; i<vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tlet key = vchild.key;\n\t\t\tif (key!=null) {\n\t\t\t\tif (keyedLen && keyed[key]!==undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (!child && min<childrenLen) {\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\n\t\t\t\t\tif (children[j]!==undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\n\t\t\t\t\t\tif (j===min) min++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child!==dom && child!==f) {\n\t\t\t\tif (f==null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t}\n\t\t\t\telse if (child===f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// remove unused keyed children:\n\tif (keyedLen) {\n\t\tfor (let i in keyed) if (keyed[i]!==undefined) recollectNodeTree(keyed[i], false);\n\t}\n\n\t// remove orphaned unkeyed children:\n\twhile (min<=childrenLen) {\n\t\tif ((child = children[childrenLen--])!==undefined) recollectNodeTree(child, false);\n\t}\n}\n\n\n\n/** Recursively recycle (or just unmount) a node and its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nexport function recollectNodeTree(node, unmountOnly) {\n\tlet component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t}\n\telse {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node[ATTR_KEY]!=null && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);\n\n\t\tif (unmountOnly===false || node[ATTR_KEY]==null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\n\n/** Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nexport function removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tlet next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\tlet name;\n\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name]!=null) && old[name]!=null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n","import { Component } from '../component';\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nconst components = {};\n\n\n/** Reclaim a component for later re-use by the recycler. */\nexport function collectComponent(component) {\n\tlet name = component.constructor.name;\n\t(components[name] || (components[name] = [])).push(component);\n}\n\n\n/** Create a component. Normalizes differences between PFC's and classful Components. */\nexport function createComponent(Ctor, props, context) {\n\tlet list = components[Ctor.name],\n\t\tinst;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t}\n\telse {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\n\n\tif (list) {\n\t\tfor (let i=list.length; i--; ) {\n\t\t\tif (list[i].constructor===Ctor) {\n\t\t\t\tinst.nextBase = list[i].nextBase;\n\t\t\t\tlist.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn inst;\n}\n\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { SYNC_RENDER, NO_RENDER, FORCE_RENDER, ASYNC_RENDER, ATTR_KEY } from '../constants';\nimport options from '../options';\nimport { extend } from '../util';\nimport { enqueueRender } from '../render-queue';\nimport { getNodeProps } from './index';\nimport { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';\nimport { createComponent, collectComponent } from './component-recycler';\nimport { removeNode } from '../dom/index';\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nexport function setComponentProps(component, props, opts, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif ((component.__ref = props.ref)) delete props.ref;\n\tif ((component.__key = props.key)) delete props.key;\n\n\tif (!component.base || mountAll) {\n\t\tif (component.componentWillMount) component.componentWillMount();\n\t}\n\telse if (component.componentWillReceiveProps) {\n\t\tcomponent.componentWillReceiveProps(props, context);\n\t}\n\n\tif (context && context!==component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (opts!==NO_RENDER) {\n\t\tif (opts===SYNC_RENDER || options.syncComponentUpdates!==false || !component.base) {\n\t\t\trenderComponent(component, SYNC_RENDER, mountAll);\n\t\t}\n\t\telse {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\n\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nexport function renderComponent(component, opts, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tlet props = component.props,\n\t\tstate = component.state,\n\t\tcontext = component.context,\n\t\tpreviousProps = component.prevProps || props,\n\t\tpreviousState = component.prevState || state,\n\t\tpreviousContext = component.prevContext || context,\n\t\tisUpdate = component.base,\n\t\tnextBase = component.nextBase,\n\t\tinitialBase = isUpdate || nextBase,\n\t\tinitialChildComponent = component._component,\n\t\tskip = false,\n\t\trendered, inst, cbase;\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (opts!==FORCE_RENDER\n\t\t\t&& component.shouldComponentUpdate\n\t\t\t&& component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t}\n\t\telse if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\trendered = component.render(props, state, context);\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tlet childComponent = rendered && rendered.nodeName,\n\t\t\ttoUnmount, base;\n\n\t\tif (typeof childComponent==='function') {\n\t\t\t// set up high order component link\n\n\t\t\tlet childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor===childComponent && childProps.key==inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, SYNC_RENDER, context, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, NO_RENDER, context, false);\n\t\t\t\trenderComponent(inst, SYNC_RENDER, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t}\n\t\telse {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || opts===SYNC_RENDER) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base!==initialBase && inst!==initialChildComponent) {\n\t\t\tlet baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base!==baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tlet componentRef = component,\n\t\t\t\tt = component;\n\t\t\twhile ((t=t._parentComponent)) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t}\n\telse if (!skip) {\n\t\t// Ensure that pending componentDidMount() hooks of child components\n\t\t// are called before the componentDidUpdate() hook in the parent.\n\t\t// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n\t\t// flushMounts();\n\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, previousContext);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\tif (component._renderCallbacks!=null) {\n\t\twhile (component._renderCallbacks.length) component._renderCallbacks.pop().call(component);\n\t}\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nexport function buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tlet c = dom && dom._component,\n\t\toriginalComponent = c,\n\t\toldDom = dom,\n\t\tisDirectOwner = c && dom._componentConstructor===vnode.nodeName,\n\t\tisOwner = isDirectOwner,\n\t\tprops = getNodeProps(vnode);\n\twhile (c && !isOwner && (c=c._parentComponent)) {\n\t\tisOwner = c.constructor===vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, ASYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\t}\n\telse {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, SYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom!==oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nexport function unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tlet base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tlet inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t}\n\telse if (base) {\n\t\tif (base[ATTR_KEY] && base[ATTR_KEY].ref) base[ATTR_KEY].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\tcollectComponent(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n","/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\nexport default {\n\n\t/** If `true`, `prop` changes trigger synchronous component updates.\n\t *\t@name syncComponentUpdates\n\t *\t@type Boolean\n\t *\t@default true\n\t */\n\t//syncComponentUpdates: true,\n\n\t/** Processes all created VNodes.\n\t *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n\t */\n\t//vnode(vnode) { }\n\n\t/** Hook invoked after a component is mounted. */\n\t// afterMount(component) { }\n\n\t/** Hook invoked after the DOM is updated with a component's latest render. */\n\t// afterUpdate(component) { }\n\n\t/** Hook invoked immediately before a component is unmounted. */\n\t// beforeUnmount(component) { }\n};\n","import { FORCE_RENDER } from './constants';\nimport { extend } from './util';\nimport { renderComponent } from './vdom/component';\nimport { enqueueRender } from './render-queue';\n\n/** Base Component class.\n *\tProvides `setState()` and `forceUpdate()`, which trigger rendering.\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nexport function Component(props, context) {\n\tthis._dirty = true;\n\n\t/** @public\n\t *\t@type {object}\n\t */\n\tthis.context = context;\n\n\t/** @public\n\t *\t@type {object}\n\t */\n\tthis.props = props;\n\n\t/** @public\n\t *\t@type {object}\n\t */\n\tthis.state = this.state || {};\n}\n\n\nextend(Component.prototype, {\n\n\t/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.\n\t *\t@param {object} nextProps\n\t *\t@param {object} nextState\n\t *\t@param {object} nextContext\n\t *\t@returns {Boolean} should the component re-render\n\t *\t@name shouldComponentUpdate\n\t *\t@function\n\t */\n\n\n\t/** Update component state by copying properties from `state` to `this.state`.\n\t *\t@param {object} state\t\tA hash of state properties to update with new values\n\t *\t@param {function} callback\tA function to be called once component state is updated\n\t */\n\tsetState(state, callback) {\n\t\tlet s = this.state;\n\t\tif (!this.prevState) this.prevState = extend({}, s);\n\t\textend(s, typeof state==='function' ? state(s, this.props) : state);\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/** Immediately perform a synchronous re-render of the component.\n\t *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n\t *\t@private\n\t */\n\tforceUpdate(callback) {\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\trenderComponent(this, FORCE_RENDER);\n\t},\n\n\n\t/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n\t *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n\t *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n\t *\t@param {object} state\t\tThe component's current state\n\t *\t@param {object} context\t\tContext object (if a parent component has provided context)\n\t *\t@returns VNode\n\t */\n\trender() {}\n\n});\n","import { diff } from './vdom/diff';\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nexport function render(vnode, parent, merge) {\n\treturn diff(merge, vnode, {}, false, parent, false);\n}\n","import { h, h as createElement } from './h';\nimport { cloneElement } from './clone-element';\nimport { Component } from './component';\nimport { render } from './render';\nimport { rerender } from './render-queue';\nimport options from './options';\n\nexport default {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nexport {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n"]}